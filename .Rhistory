<<<<<<< HEAD
# points(cutpoints2$one.specificity, cutpoints2$sensitivity, pch = 16)
legend("bottomright", legend=(c("Models", "Reference")), cex = 0.85,
bg = "", bty = "n", col = c("blue", "black"), lty = c(1,1), lwd = c(2,2))
=======
>>>>>>> a50045bd9dfc6a3b128bcd585bc85194afa8d4f7
#Plot modified ROC
plot(cutpoints2$one.specificity,cutpoints2$sensitivity,
main = paste("Modified ROC Curve of ", n ," Best Models", sep = ""),
type = "l", col = "blue", lwd = 2, tck = -0.02,
xlab = "1-Specificity",
ylab = "Sensitivity",
ylim = c(0,1.0),
xlim = c(0,1.0))
lines(seq(max(cutpoints2$one.specificity), 1, length.out = 2),
c(max(cutpoints2$sensitivity), max(cutpoints2$sensitivity)), col = "blue", lwd = 2)
lines(seq(0, 1, 0.1), seq(0, 1, 0.1),lwd = 1)
segments(0,min(cutpoints2$sensitivity), min(cutpoints2$one.specificity, min(cutpoints2$sensitivity)), lty = 2)
segments(min(cutpoints2$one.specificity),0, min(cutpoints2$one.specificity), min(cutpoints2$sensitivity), lty = 2)
<<<<<<< HEAD
# points(cutpoints2$one.specificity, cutpoints2$sensitivity, pch = 16)
legend("bottomright", legend=(c("Models", "Reference")), cex = 0.85,
bg = "", bty = "n", col = c("blue", "black"), lty = c(1,1), lwd = c(2,2))
# points(cutpoints2$one.specificity, cutpoints2$sensitivity, pch = 16)
legend(c(.8,0.2), legend=(c("Models", "Reference")), cex = 0.85,
bg = "", bty = "n", col = c("blue", "black"), lty = c(1,1), lwd = c(2,2))
#Plot modified ROC
plot(cutpoints2$one.specificity,cutpoints2$sensitivity,
main = paste("Modified ROC Curve of ", n ," Best Models", sep = ""),
type = "l", col = "blue", lwd = 2, tck = -0.02,
xlab = "1-Specificity",
ylab = "Sensitivity",
ylim = c(0,1.0),
xlim = c(0,1.0))
lines(seq(max(cutpoints2$one.specificity), 1, length.out = 2),
c(max(cutpoints2$sensitivity), max(cutpoints2$sensitivity)), col = "blue", lwd = 2)
lines(seq(0, 1, 0.1), seq(0, 1, 0.1),lwd = 1)
segments(0,min(cutpoints2$sensitivity), min(cutpoints2$one.specificity, min(cutpoints2$sensitivity)), lty = 2)
segments(min(cutpoints2$one.specificity),0, min(cutpoints2$one.specificity), min(cutpoints2$sensitivity), lty = 2)
# points(cutpoints2$one.specificity, cutpoints2$sensitivity, pch = 16)
legend(c(.8,0.2), legend=(c("Models", "Reference")), cex = 0.85,
bg = "", bty = "n", col = c("blue", "black"), lty = c(1,1), lwd = c(2,2))
?legend
?aucGARP
# points(cutpoints2$one.specificity, cutpoints2$sensitivity, pch = 16)
legend(.8,0.2, legend=(c("Models", "Reference")), cex = 0.85,
bg = "", bty = "n", col = c("blue", "black"), lty = c(1,1), lwd = c(2,2))
# points(cutpoints2$one.specificity, cutpoints2$sensitivity, pch = 16)
legend(.8,0.4, legend=(c("Models", "Reference")), cex = 0.85,
bg = "", bty = "n", col = c("blue", "black"), lty = c(1,1), lwd = c(2,2))
# points(cutpoints2$one.specificity, cutpoints2$sensitivity, pch = 16)
legend(.75,0.4, legend=(c("Models", "Reference")), cex = 0.85,
bg = "", bty = "n", col = c("blue", "black"), lty = c(1,1), lwd = c(2,2))
#Plot modified ROC
plot(cutpoints2$one.specificity,cutpoints2$sensitivity,
main = paste("Modified ROC Curve of ", n ," Best Models", sep = ""),
type = "l", col = "blue", lwd = 2, tck = -0.02,
xlab = "1-Specificity",
ylab = "Sensitivity",
ylim = c(0,1.0),
xlim = c(0,1.0))
lines(seq(max(cutpoints2$one.specificity), 1, length.out = 2),
c(max(cutpoints2$sensitivity), max(cutpoints2$sensitivity)), col = "blue", lwd = 2)
lines(seq(0, 1, 0.1), seq(0, 1, 0.1),lwd = 1)
segments(0,min(cutpoints2$sensitivity), min(cutpoints2$one.specificity, min(cutpoints2$sensitivity)), lty = 2)
segments(min(cutpoints2$one.specificity),0, min(cutpoints2$one.specificity), min(cutpoints2$sensitivity), lty = 2)
# points(cutpoints2$one.specificity, cutpoints2$sensitivity, pch = 16)
legend(.75,0.4, legend=(c("Models", "Reference")), cex = 0.85,
bg = "", bty = "n", col = c("blue", "black"), lty = c(1,1), lwd = c(2,2))
# points(cutpoints2$one.specificity, cutpoints2$sensitivity, pch = 16)
legend(.75,0.4, legend=(c("Models", "Reference")), cex = 0.85,
bg = "", col = c("blue", "black"), lty = c(1,1), lwd = c(2,2))
#Plot modified ROC
plot(cutpoints2$one.specificity,cutpoints2$sensitivity,
main = paste("Modified ROC Curve of ", n ," Best Models", sep = ""),
type = "l", col = "blue", lwd = 2, tck = -0.02,
xlab = "1-Specificity",
ylab = "Sensitivity",
ylim = c(0,1.0),
xlim = c(0,1.0))
lines(seq(max(cutpoints2$one.specificity), 1, length.out = 2),
c(max(cutpoints2$sensitivity), max(cutpoints2$sensitivity)), col = "blue", lwd = 2)
lines(seq(0, 1, 0.1), seq(0, 1, 0.1),lwd = 1)
segments(0,min(cutpoints2$sensitivity), min(cutpoints2$one.specificity, min(cutpoints2$sensitivity)), lty = 2)
segments(min(cutpoints2$one.specificity),0, min(cutpoints2$one.specificity), min(cutpoints2$sensitivity), lty = 2)
# points(cutpoints2$one.specificity, cutpoints2$sensitivity, pch = 16)
legend(.75,0.4, legend=(c("Models", "Reference", "I-E")), cex = 0.85,
bg = "", bty = "n", col = c("blue", "black", "black"), lty = c(1,1,2), lwd = c(2,2,2))
# points(cutpoints2$one.specificity, cutpoints2$sensitivity, pch = 16)
legend(.75,0.4, legend=(c("Models", "Reference", "I-E")), cex = 0.85,
bg = "", bty = "n", col = c("blue", "black", "black"), lty = c(1,1,2), lwd = c(2,2,2))
# points(cutpoints2$one.specificity, cutpoints2$sensitivity, pch = 16)
legend(.75,0.4, legend=(c("Models", "Reference", "I-E")),
bg = "", bty = "n", col = c("blue", "black", "black"), lty = c(1,1,2), lwd = c(2,2,2))
legend(.75,0.4, legend=(c("Models", "Reference", "E")),
bg = "", bty = "n", col = c("blue", "black", "black"), lty = c(1,1,2), lwd = c(2,2,2))
return(list(Modified.AUC= sum(cutpoints2$AUC), Modified.Reference = null, AUC.Ratio = AUC.ratio))
#Plot modified ROC
plot(cutpoints2$one.specificity,cutpoints2$sensitivity,
main = paste("Modified ROC Curve of ", n ," Best Models", sep = ""),
type = "l", col = "blue", lwd = 2, tck = -0.02,
xlab = "1-Specificity",
ylab = "Sensitivity",
ylim = c(0,1.0),
xlim = c(0,1.0))
lines(seq(max(cutpoints2$one.specificity), 1, length.out = 2),
c(max(cutpoints2$sensitivity), max(cutpoints2$sensitivity)), col = "blue", lwd = 2)
lines(seq(0, 1, 0.1), seq(0, 1, 0.1),lwd = 1)
segments(0,min(cutpoints2$sensitivity), min(cutpoints2$one.specificity, min(cutpoints2$sensitivity)), lty = 2)
segments(min(cutpoints2$one.specificity),0, min(cutpoints2$one.specificity), min(cutpoints2$sensitivity), lty = 2)
legend(.75,0.4, legend=(c("Models", "Reference", "E")),
bg = "", bty = "n", col = c("blue", "black", "black"), lty = c(1,1,2), lwd = c(2,2,2))
legend(.75,0.4, legend=(c("Models", "Reference")),
bg = "", bty = "n", col = c("blue", "black"), lty = c(1,1), lwd = c(2,2))
#Plot modified ROC
plot(cutpoints2$one.specificity,cutpoints2$sensitivity,
main = paste("Modified ROC Curve of ", n ," Best Models", sep = ""),
type = "l", col = "blue", lwd = 2, tck = -0.02,
xlab = "1-Specificity",
ylab = "Sensitivity",
ylim = c(0,1.0),
xlim = c(0,1.0))
lines(seq(max(cutpoints2$one.specificity), 1, length.out = 2),
c(max(cutpoints2$sensitivity), max(cutpoints2$sensitivity)), col = "blue", lwd = 2)
lines(seq(0, 1, 0.1), seq(0, 1, 0.1),lwd = 1)
segments(0,min(cutpoints2$sensitivity), min(cutpoints2$one.specificity, min(cutpoints2$sensitivity)), lty = 2)
segments(min(cutpoints2$one.specificity),0, min(cutpoints2$one.specificity), min(cutpoints2$sensitivity), lty = 2)
legend(.75,0.4, legend=(c("Models", "Reference")),
bg = "", bty = "n", col = c("blue", "black"), lty = c(1,1), lwd = c(2,2))
legend(x=0.75,y=0.4, legend=(c("Models", "Reference")),
bg = "", bty = "n", col = c("blue", "black"), lty = c(1,1), lwd = c(2,2))
legend("bottomright", legend=(c("Models", "Reference")),
bg = "", bty = "n", col = c("blue", "black"), lty = c(1,1), lwd = c(2,2))
#Plot modified ROC
plot(cutpoints2$one.specificity,cutpoints2$sensitivity,
main = paste("Modified ROC Curve of ", n ," Best Models", sep = ""),
type = "l", col = "blue", lwd = 2, tck = -0.02,
xlab = "1-Specificity",
ylab = "Sensitivity",
ylim = c(0,1.0),
xlim = c(0,1.0))
lines(seq(max(cutpoints2$one.specificity), 1, length.out = 2),
c(max(cutpoints2$sensitivity), max(cutpoints2$sensitivity)), col = "blue", lwd = 2)
lines(seq(0, 1, 0.1), seq(0, 1, 0.1),lwd = 1)
segments(0,min(cutpoints2$sensitivity), min(cutpoints2$one.specificity, min(cutpoints2$sensitivity)), lty = 2)
segments(min(cutpoints2$one.specificity),0, min(cutpoints2$one.specificity), min(cutpoints2$sensitivity), lty = 2)
legend("bottomright", legend=(c("Models", "Reference", "I-E")),
bg = "", bty = "n", col = c("blue", "black", "black"), lty = c(1,1,2), lwd = c(2,2,2))
legend(x=0.75, y = 0.4, legend=(c("Models", "Reference", "I-E")),
bg = "", bty = "n", col = c("blue", "black", "black"), lty = c(1,1,2), lwd = c(2,2,2))
legend(x=0.5, y = 0.4, legend=(c("Models", "Reference", "I-E")),
bg = "", bty = "n", col = c("blue", "black", "black"), lty = c(1,1,2), lwd = c(2,2,2))
#Plot modified ROC
plot(cutpoints2$one.specificity,cutpoints2$sensitivity,
main = paste("Modified ROC Curve of ", n ," Best Models", sep = ""),
type = "l", col = "blue", lwd = 2, tck = -0.02,
xlab = "1-Specificity",
ylab = "Sensitivity",
ylim = c(0,1.0),
xlim = c(0,1.0))
lines(seq(max(cutpoints2$one.specificity), 1, length.out = 2),
c(max(cutpoints2$sensitivity), max(cutpoints2$sensitivity)), col = "blue", lwd = 2)
lines(seq(0, 1, 0.1), seq(0, 1, 0.1),lwd = 1)
segments(0,min(cutpoints2$sensitivity), min(cutpoints2$one.specificity, min(cutpoints2$sensitivity)), lty = 2)
segments(min(cutpoints2$one.specificity),0, min(cutpoints2$one.specificity), min(cutpoints2$sensitivity), lty = 2)
legend(x=0.5, y = 0.4, legend=(c("Models", "Reference", "I-E")),
bg = "", bty = "n", col = c("blue", "black", "black"), lty = c(1,1,2), lwd = c(2,2,2))
#Plot modified ROC
plot(cutpoints2$one.specificity,cutpoints2$sensitivity,
main = paste("Modified ROC Curve of ", n ," Best Models", sep = ""),
type = "l", col = "blue", lwd = 2, tck = -0.02,
xlab = "1-Specificity",
ylab = "Sensitivity",
ylim = c(0,1.0),
xlim = c(0,1.0))
#Plot modified ROC
plot(cutpoints2$one.specificity,cutpoints2$sensitivity,
main = paste("Modified ROC Curve of ", n ," Best Models", sep = ""),
type = "l", col = "blue", lwd = 2, tck = -0.02,
xlab = "1-Specificity",
ylab = "Sensitivity",
ylim = c(0,1.0),
xlim = c(0,1.0))
lines(seq(max(cutpoints2$one.specificity), 1, length.out = 2),
c(max(cutpoints2$sensitivity), max(cutpoints2$sensitivity)), col = "blue", lwd = 2)
lines(seq(0, 1, 0.1), seq(0, 1, 0.1),lwd = 1)
segments(0,min(cutpoints2$sensitivity), min(cutpoints2$one.specificity, min(cutpoints2$sensitivity)), lty = 2)
segments(min(cutpoints2$one.specificity),0, min(cutpoints2$one.specificity), min(cutpoints2$sensitivity), lty = 2)
legend(x=0.5, y = 0.5, legend=(c("Models", "Reference", "I-E")),
bg = "", bty = "n", col = c("blue", "black", "black"), lty = c(1,1,2), lwd = c(2,2,2))
legend(x=0.5, y = 0.5, legend=(c("Models", "Reference", "1-E")),
bg = "", bty = "n", col = c("blue", "black", "black"), lty = c(1,1,2), lwd = c(2,2,2))
AUC.ratio(n = 10, x = r.sum, points = test.pts, E = 0.05)
aucRatio <- function(n, x, points, E){
#Extract values from summated grid at test point locations
grid = x
taxa.models <- raster::extract(grid, points)
if(any(is.na(taxa.models))){stop("One or more testing points do not overlap raster.")}
#Create cutpoints dataframe
cutpoints <- data.frame(seq(0, n, 1))
names(cutpoints) <- "cutpoint"
#Summarize each cutpoint
for(i in 1:dim(cutpoints)[1]){
cutpoints$taxa.present[i]   <- sum(taxa.models == i-1)
cutpoints$cutpoint.area[i]  <- freq(grid, value = i-1)
cutpoints$no.taxa.pixels[i] <- freq(grid, value = i-1) - sum(taxa.models == i-1)
cutpoints$cum.area[i] <- ifelse(cutpoints$cutpoint[i] == 0,0,
ifelse(cutpoints$cutpoint[i] == 1,
(cutpoints$no.taxa.pixels[1] + cutpoints$no.taxa.pixels[i]),
(cutpoints$no.taxa.pixels[i] + cutpoints$cum.area[i-1])))
}
#Calculate confusion matrix
for(i in 1:dim(cutpoints)[1]){
cutpoints$a[i] <- ifelse(cutpoints[i,1] == 0, (length(taxa.models) - cutpoints$taxa.present[i]),(cutpoints$a[i-1] - cutpoints$taxa.present[i]))
cutpoints$b[i] <- ifelse(cutpoints[i,1] == 0, cutpoints$no.taxa.pixels[i], (cutpoints$b[i-1] + cutpoints$no.taxa.pixels[i]))
cutpoints$c[i] <- ifelse(cutpoints[i,1] == 0, cutpoints$taxa.present[i], (cutpoints$c[i-1] + cutpoints$taxa.present[i]))
cutpoints$d[i] <- ifelse(cutpoints[i,1] == 0, (sum(cutpoints$no.taxa.pixels) - cutpoints$no.taxa.pixels[i]), (cutpoints$d[i-1] - cutpoints$no.taxa.pixels[i]))
}
#Calculate sensitivity and 1-specificity
for(i in 1:dim(cutpoints)[1]){
cutpoints$sensitivity[i]     <- cutpoints$a[i]/(cutpoints$a[i] + cutpoints$c[i])
cutpoints$one.specificity[i] <- 1-(cutpoints$b[i]/(cutpoints$b[i] + cutpoints$d[i]))
}
#Calculate 1-E cutpoints
cutpoints2 <- cutpoints[cutpoints$sensitivity >= (1-E),]
for(i in 1:dim(cutpoints2)[1]){
cutpoints2$sensitivity[i]     <- cutpoints2$a[i]/(cutpoints2$a[i] + cutpoints2$c[i])
cutpoints2$one.specificity[i] <- 1-(cutpoints2$b[i]/(cutpoints2$b[i] + cutpoints2$d[i]))
}
#Calculate the area under the null curve given E
null <- ((min(cutpoints2$one.specificity)+1)/2)*(1-min(cutpoints2$one.specificity))
#Calculate AUC value for each cutpoint
for(i in 1:dim(cutpoints2)[1]){
cutpoints2$AUC[i] <- ifelse(cutpoints2[i,1] == 0, (((1+cutpoints2$sensitivity[i])/2) * (1-cutpoints2$one.specificity[i])),
(((cutpoints2$sensitivity[i] + cutpoints2$sensitivity[i-1])/2) * (cutpoints2$one.specificity[i-1] - cutpoints$one.specificity[i])))
}
#Calculate modified AUC ratio
AUC.ratio <- sum(cutpoints2$AUC)/null
#Plot modified ROC
plot(cutpoints2$one.specificity,cutpoints2$sensitivity,
main = paste("Modified ROC Curve of ", n ," Best Models", sep = ""),
type = "l", col = "blue", lwd = 2, tck = -0.02,
xlab = "1-Specificity",
ylab = "Sensitivity",
ylim = c(0,1.0),
xlim = c(0,1.0))
lines(seq(max(cutpoints2$one.specificity), 1, length.out = 2),
c(max(cutpoints2$sensitivity), max(cutpoints2$sensitivity)), col = "blue", lwd = 2)
lines(seq(0, 1, 0.1), seq(0, 1, 0.1),lwd = 1)
segments(0,min(cutpoints2$sensitivity), min(cutpoints2$one.specificity, min(cutpoints2$sensitivity)), lty = 2)
segments(min(cutpoints2$one.specificity),0, min(cutpoints2$one.specificity), min(cutpoints2$sensitivity), lty = 2)
legend(x=0.5, y = 0.5, legend=(c("Models", "Reference", "1-E")),
bg = "", bty = "n", col = c("blue", "black", "black"), lty = c(1,1,2), lwd = c(2,2,2))
return(list(Modified.AUC= sum(cutpoints2$AUC), Modified.Reference = null, AUC.Ratio = AUC.ratio))
}
aucRatio(n = 10, x = r.sum, points = test.pts, E = 0.05)
r.sum = x
n = 10
points = points
aucRatio(n = 10, x = r.sum, points = test.pts, E = 0.05)
aucRatio(n = 10, x = x, points = points, E = 0.05)
=======
legend(x=0.5, y = 0.5, legend=(c("Models", "Reference", "1-E")),
bg = "", bty = "n", col = c("blue", "black", "black"), lty = c(1,1,2), lwd = c(2,2,2))
return(list(Modified.AUC= sum(cutpoints2$AUC), Modified.Reference = null, AUC.Ratio = AUC.ratio))
}
aucRatio(n = 10, x = r.sum, points = test.pts, E = 0.05)
r.sum = x
n = 10
points = points
aucRatio(n = 10, x = r.sum, points = test.pts, E = 0.05)
aucRatio(n = 10, x = x, points = points, E = 0.05)
#Extract values from summated grid at test point locations
grid = x
taxa.models <- raster::extract(grid, points)
if(any(is.na(taxa.models))){stop("One or more testing points do not overlap raster.")}
#Create cutpoints dataframe
cutpoints <- data.frame(seq(0, n, 1))
names(cutpoints) <- "cutpoint"
#Summarize each cutpoint
for(i in 1:dim(cutpoints)[1]){
cutpoints$taxa.present[i]   <- sum(taxa.models == i-1)
cutpoints$cutpoint.area[i]  <- freq(grid, value = i-1)
cutpoints$no.taxa.pixels[i] <- freq(grid, value = i-1) - sum(taxa.models == i-1)
cutpoints$cum.area[i] <- ifelse(cutpoints$cutpoint[i] == 0,0,
ifelse(cutpoints$cutpoint[i] == 1,
(cutpoints$no.taxa.pixels[1] + cutpoints$no.taxa.pixels[i]),
(cutpoints$no.taxa.pixels[i] + cutpoints$cum.area[i-1])))
}
#Calculate confusion matrix
for(i in 1:dim(cutpoints)[1]){
cutpoints$a[i] <- ifelse(cutpoints[i,1] == 0, (length(taxa.models) - cutpoints$taxa.present[i]),(cutpoints$a[i-1] - cutpoints$taxa.present[i]))
cutpoints$b[i] <- ifelse(cutpoints[i,1] == 0, cutpoints$no.taxa.pixels[i], (cutpoints$b[i-1] + cutpoints$no.taxa.pixels[i]))
cutpoints$c[i] <- ifelse(cutpoints[i,1] == 0, cutpoints$taxa.present[i], (cutpoints$c[i-1] + cutpoints$taxa.present[i]))
cutpoints$d[i] <- ifelse(cutpoints[i,1] == 0, (sum(cutpoints$no.taxa.pixels) - cutpoints$no.taxa.pixels[i]), (cutpoints$d[i-1] - cutpoints$no.taxa.pixels[i]))
}
#Calculate sensitivity and 1-specificity
for(i in 1:dim(cutpoints)[1]){
cutpoints$sensitivity[i]     <- cutpoints$a[i]/(cutpoints$a[i] + cutpoints$c[i])
cutpoints$one.specificity[i] <- 1-(cutpoints$b[i]/(cutpoints$b[i] + cutpoints$d[i]))
}
#Calculate 1-E cutpoints
cutpoints2 <- cutpoints[cutpoints$sensitivity >= (1-E),]
for(i in 1:dim(cutpoints2)[1]){
cutpoints2$sensitivity[i]     <- cutpoints2$a[i]/(cutpoints2$a[i] + cutpoints2$c[i])
cutpoints2$one.specificity[i] <- 1-(cutpoints2$b[i]/(cutpoints2$b[i] + cutpoints2$d[i]))
}
#Calculate the area under the null curve given E
null <- ((min(cutpoints2$one.specificity)+1)/2)*(1-min(cutpoints2$one.specificity))
#Calculate AUC value for each cutpoint
for(i in 1:dim(cutpoints2)[1]){
cutpoints2$AUC[i] <- ifelse(cutpoints2[i,1] == 0, (((1+cutpoints2$sensitivity[i])/2) * (1-cutpoints2$one.specificity[i])),
(((cutpoints2$sensitivity[i] + cutpoints2$sensitivity[i-1])/2) * (cutpoints2$one.specificity[i-1] - cutpoints$one.specificity[i])))
}
#Calculate modified AUC ratio
AUC.ratio <- sum(cutpoints2$AUC)/null
#Plot modified ROC
plot(cutpoints2$one.specificity,cutpoints2$sensitivity,
main = paste("Modified ROC Curve of ", n ," Best Models", sep = ""),
type = "l", col = "blue", lwd = 2, tck = -0.02,
xlab = "1-Specificity",
ylab = "Sensitivity",
ylim = c(0,1.0),
xlim = c(0,1.0))
lines(seq(max(cutpoints2$one.specificity), 1, length.out = 2),
c(max(cutpoints2$sensitivity), max(cutpoints2$sensitivity)), col = "blue", lwd = 2)
lines(seq(0, 1, 0.1), seq(0, 1, 0.1),lwd = 1)
segments(0,min(cutpoints2$sensitivity), min(cutpoints2$one.specificity, min(cutpoints2$sensitivity)), lty = 2)
segments(min(cutpoints2$one.specificity),0, min(cutpoints2$one.specificity), min(cutpoints2$sensitivity), lty = 2)
legend(x=0.5, y = 0.5, legend=(c("Models", "Reference", "1-E")),
bg = "", bty = "n", col = c("blue", "black", "black"), lty = c(1,1,2), lwd = c(2,2,2))
return(list(Modified.AUC= sum(cutpoints2$AUC), Modified.Reference = null, AUC.Ratio = AUC.ratio))
list(Modified.AUC= sum(cutpoints2$AUC), Modified.Reference = null, AUC.Ratio = AUC.ratio)
E= 0.05
>>>>>>> a50045bd9dfc6a3b128bcd585bc85194afa8d4f7
#Extract values from summated grid at test point locations
grid = x
taxa.models <- raster::extract(grid, points)
if(any(is.na(taxa.models))){stop("One or more testing points do not overlap raster.")}
#Create cutpoints dataframe
cutpoints <- data.frame(seq(0, n, 1))
names(cutpoints) <- "cutpoint"
#Summarize each cutpoint
for(i in 1:dim(cutpoints)[1]){
cutpoints$taxa.present[i]   <- sum(taxa.models == i-1)
cutpoints$cutpoint.area[i]  <- freq(grid, value = i-1)
cutpoints$no.taxa.pixels[i] <- freq(grid, value = i-1) - sum(taxa.models == i-1)
cutpoints$cum.area[i] <- ifelse(cutpoints$cutpoint[i] == 0,0,
ifelse(cutpoints$cutpoint[i] == 1,
(cutpoints$no.taxa.pixels[1] + cutpoints$no.taxa.pixels[i]),
(cutpoints$no.taxa.pixels[i] + cutpoints$cum.area[i-1])))
}
#Calculate confusion matrix
for(i in 1:dim(cutpoints)[1]){
cutpoints$a[i] <- ifelse(cutpoints[i,1] == 0, (length(taxa.models) - cutpoints$taxa.present[i]),(cutpoints$a[i-1] - cutpoints$taxa.present[i]))
cutpoints$b[i] <- ifelse(cutpoints[i,1] == 0, cutpoints$no.taxa.pixels[i], (cutpoints$b[i-1] + cutpoints$no.taxa.pixels[i]))
cutpoints$c[i] <- ifelse(cutpoints[i,1] == 0, cutpoints$taxa.present[i], (cutpoints$c[i-1] + cutpoints$taxa.present[i]))
cutpoints$d[i] <- ifelse(cutpoints[i,1] == 0, (sum(cutpoints$no.taxa.pixels) - cutpoints$no.taxa.pixels[i]), (cutpoints$d[i-1] - cutpoints$no.taxa.pixels[i]))
}
#Calculate sensitivity and 1-specificity
for(i in 1:dim(cutpoints)[1]){
cutpoints$sensitivity[i]     <- cutpoints$a[i]/(cutpoints$a[i] + cutpoints$c[i])
cutpoints$one.specificity[i] <- 1-(cutpoints$b[i]/(cutpoints$b[i] + cutpoints$d[i]))
}
#Calculate 1-E cutpoints
cutpoints2 <- cutpoints[cutpoints$sensitivity >= (1-E),]
for(i in 1:dim(cutpoints2)[1]){
cutpoints2$sensitivity[i]     <- cutpoints2$a[i]/(cutpoints2$a[i] + cutpoints2$c[i])
cutpoints2$one.specificity[i] <- 1-(cutpoints2$b[i]/(cutpoints2$b[i] + cutpoints2$d[i]))
}
<<<<<<< HEAD
#Calculate the area under the null curve given E
null <- ((min(cutpoints2$one.specificity)+1)/2)*(1-min(cutpoints2$one.specificity))
#Calculate AUC value for each cutpoint
for(i in 1:dim(cutpoints2)[1]){
cutpoints2$AUC[i] <- ifelse(cutpoints2[i,1] == 0, (((1+cutpoints2$sensitivity[i])/2) * (1-cutpoints2$one.specificity[i])),
(((cutpoints2$sensitivity[i] + cutpoints2$sensitivity[i-1])/2) * (cutpoints2$one.specificity[i-1] - cutpoints$one.specificity[i])))
}
#Calculate modified AUC ratio
AUC.ratio <- sum(cutpoints2$AUC)/null
#Plot modified ROC
plot(cutpoints2$one.specificity,cutpoints2$sensitivity,
main = paste("Modified ROC Curve of ", n ," Best Models", sep = ""),
type = "l", col = "blue", lwd = 2, tck = -0.02,
xlab = "1-Specificity",
ylab = "Sensitivity",
ylim = c(0,1.0),
xlim = c(0,1.0))
lines(seq(max(cutpoints2$one.specificity), 1, length.out = 2),
c(max(cutpoints2$sensitivity), max(cutpoints2$sensitivity)), col = "blue", lwd = 2)
lines(seq(0, 1, 0.1), seq(0, 1, 0.1),lwd = 1)
segments(0,min(cutpoints2$sensitivity), min(cutpoints2$one.specificity, min(cutpoints2$sensitivity)), lty = 2)
segments(min(cutpoints2$one.specificity),0, min(cutpoints2$one.specificity), min(cutpoints2$sensitivity), lty = 2)
legend(x=0.5, y = 0.5, legend=(c("Models", "Reference", "1-E")),
bg = "", bty = "n", col = c("blue", "black", "black"), lty = c(1,1,2), lwd = c(2,2,2))
return(list(Modified.AUC= sum(cutpoints2$AUC), Modified.Reference = null, AUC.Ratio = AUC.ratio))
list(Modified.AUC= sum(cutpoints2$AUC), Modified.Reference = null, AUC.Ratio = AUC.ratio)
E= 0.05
#Extract values from summated grid at test point locations
grid = x
taxa.models <- raster::extract(grid, points)
if(any(is.na(taxa.models))){stop("One or more testing points do not overlap raster.")}
#Create cutpoints dataframe
cutpoints <- data.frame(seq(0, n, 1))
names(cutpoints) <- "cutpoint"
#Summarize each cutpoint
for(i in 1:dim(cutpoints)[1]){
cutpoints$taxa.present[i]   <- sum(taxa.models == i-1)
cutpoints$cutpoint.area[i]  <- freq(grid, value = i-1)
cutpoints$no.taxa.pixels[i] <- freq(grid, value = i-1) - sum(taxa.models == i-1)
cutpoints$cum.area[i] <- ifelse(cutpoints$cutpoint[i] == 0,0,
ifelse(cutpoints$cutpoint[i] == 1,
(cutpoints$no.taxa.pixels[1] + cutpoints$no.taxa.pixels[i]),
(cutpoints$no.taxa.pixels[i] + cutpoints$cum.area[i-1])))
}
#Calculate confusion matrix
for(i in 1:dim(cutpoints)[1]){
cutpoints$a[i] <- ifelse(cutpoints[i,1] == 0, (length(taxa.models) - cutpoints$taxa.present[i]),(cutpoints$a[i-1] - cutpoints$taxa.present[i]))
cutpoints$b[i] <- ifelse(cutpoints[i,1] == 0, cutpoints$no.taxa.pixels[i], (cutpoints$b[i-1] + cutpoints$no.taxa.pixels[i]))
cutpoints$c[i] <- ifelse(cutpoints[i,1] == 0, cutpoints$taxa.present[i], (cutpoints$c[i-1] + cutpoints$taxa.present[i]))
cutpoints$d[i] <- ifelse(cutpoints[i,1] == 0, (sum(cutpoints$no.taxa.pixels) - cutpoints$no.taxa.pixels[i]), (cutpoints$d[i-1] - cutpoints$no.taxa.pixels[i]))
}
#Calculate sensitivity and 1-specificity
for(i in 1:dim(cutpoints)[1]){
cutpoints$sensitivity[i]     <- cutpoints$a[i]/(cutpoints$a[i] + cutpoints$c[i])
cutpoints$one.specificity[i] <- 1-(cutpoints$b[i]/(cutpoints$b[i] + cutpoints$d[i]))
}
#Calculate 1-E cutpoints
cutpoints2 <- cutpoints[cutpoints$sensitivity >= (1-E),]
for(i in 1:dim(cutpoints2)[1]){
cutpoints2$sensitivity[i]     <- cutpoints2$a[i]/(cutpoints2$a[i] + cutpoints2$c[i])
cutpoints2$one.specificity[i] <- 1-(cutpoints2$b[i]/(cutpoints2$b[i] + cutpoints2$d[i]))
}
cutpoints2
cutpoints
1-E
E = 0.15
#Extract values from summated grid at test point locations
grid = x
taxa.models <- raster::extract(grid, points)
if(any(is.na(taxa.models))){stop("One or more testing points do not overlap raster.")}
#Create cutpoints dataframe
cutpoints <- data.frame(seq(0, n, 1))
names(cutpoints) <- "cutpoint"
#Summarize each cutpoint
for(i in 1:dim(cutpoints)[1]){
cutpoints$taxa.present[i]   <- sum(taxa.models == i-1)
cutpoints$cutpoint.area[i]  <- freq(grid, value = i-1)
cutpoints$no.taxa.pixels[i] <- freq(grid, value = i-1) - sum(taxa.models == i-1)
cutpoints$cum.area[i] <- ifelse(cutpoints$cutpoint[i] == 0,0,
ifelse(cutpoints$cutpoint[i] == 1,
(cutpoints$no.taxa.pixels[1] + cutpoints$no.taxa.pixels[i]),
(cutpoints$no.taxa.pixels[i] + cutpoints$cum.area[i-1])))
}
#Calculate confusion matrix
for(i in 1:dim(cutpoints)[1]){
cutpoints$a[i] <- ifelse(cutpoints[i,1] == 0, (length(taxa.models) - cutpoints$taxa.present[i]),(cutpoints$a[i-1] - cutpoints$taxa.present[i]))
cutpoints$b[i] <- ifelse(cutpoints[i,1] == 0, cutpoints$no.taxa.pixels[i], (cutpoints$b[i-1] + cutpoints$no.taxa.pixels[i]))
cutpoints$c[i] <- ifelse(cutpoints[i,1] == 0, cutpoints$taxa.present[i], (cutpoints$c[i-1] + cutpoints$taxa.present[i]))
cutpoints$d[i] <- ifelse(cutpoints[i,1] == 0, (sum(cutpoints$no.taxa.pixels) - cutpoints$no.taxa.pixels[i]), (cutpoints$d[i-1] - cutpoints$no.taxa.pixels[i]))
}
#Calculate sensitivity and 1-specificity
for(i in 1:dim(cutpoints)[1]){
cutpoints$sensitivity[i]     <- cutpoints$a[i]/(cutpoints$a[i] + cutpoints$c[i])
cutpoints$one.specificity[i] <- 1-(cutpoints$b[i]/(cutpoints$b[i] + cutpoints$d[i]))
}
#Calculate 1-E cutpoints
cutpoints2 <- cutpoints[cutpoints$sensitivity >= (1-E),]
for(i in 1:dim(cutpoints2)[1]){
cutpoints2$sensitivity[i]     <- cutpoints2$a[i]/(cutpoints2$a[i] + cutpoints2$c[i])
cutpoints2$one.specificity[i] <- 1-(cutpoints2$b[i]/(cutpoints2$b[i] + cutpoints2$d[i]))
}
#Calculate the area under the null curve given E
null <- ((min(cutpoints2$one.specificity)+1)/2)*(1-min(cutpoints2$one.specificity))
#Calculate AUC value for each cutpoint
for(i in 1:dim(cutpoints2)[1]){
cutpoints2$AUC[i] <- ifelse(cutpoints2[i,1] == 0, (((1+cutpoints2$sensitivity[i])/2) * (1-cutpoints2$one.specificity[i])),
(((cutpoints2$sensitivity[i] + cutpoints2$sensitivity[i-1])/2) * (cutpoints2$one.specificity[i-1] - cutpoints$one.specificity[i])))
}
=======
cutpoints2
cutpoints
1-E
E = 0.15
#Extract values from summated grid at test point locations
grid = x
taxa.models <- raster::extract(grid, points)
if(any(is.na(taxa.models))){stop("One or more testing points do not overlap raster.")}
#Create cutpoints dataframe
cutpoints <- data.frame(seq(0, n, 1))
names(cutpoints) <- "cutpoint"
#Summarize each cutpoint
for(i in 1:dim(cutpoints)[1]){
cutpoints$taxa.present[i]   <- sum(taxa.models == i-1)
cutpoints$cutpoint.area[i]  <- freq(grid, value = i-1)
cutpoints$no.taxa.pixels[i] <- freq(grid, value = i-1) - sum(taxa.models == i-1)
cutpoints$cum.area[i] <- ifelse(cutpoints$cutpoint[i] == 0,0,
ifelse(cutpoints$cutpoint[i] == 1,
(cutpoints$no.taxa.pixels[1] + cutpoints$no.taxa.pixels[i]),
(cutpoints$no.taxa.pixels[i] + cutpoints$cum.area[i-1])))
}
#Calculate confusion matrix
for(i in 1:dim(cutpoints)[1]){
cutpoints$a[i] <- ifelse(cutpoints[i,1] == 0, (length(taxa.models) - cutpoints$taxa.present[i]),(cutpoints$a[i-1] - cutpoints$taxa.present[i]))
cutpoints$b[i] <- ifelse(cutpoints[i,1] == 0, cutpoints$no.taxa.pixels[i], (cutpoints$b[i-1] + cutpoints$no.taxa.pixels[i]))
cutpoints$c[i] <- ifelse(cutpoints[i,1] == 0, cutpoints$taxa.present[i], (cutpoints$c[i-1] + cutpoints$taxa.present[i]))
cutpoints$d[i] <- ifelse(cutpoints[i,1] == 0, (sum(cutpoints$no.taxa.pixels) - cutpoints$no.taxa.pixels[i]), (cutpoints$d[i-1] - cutpoints$no.taxa.pixels[i]))
}
#Calculate sensitivity and 1-specificity
for(i in 1:dim(cutpoints)[1]){
cutpoints$sensitivity[i]     <- cutpoints$a[i]/(cutpoints$a[i] + cutpoints$c[i])
cutpoints$one.specificity[i] <- 1-(cutpoints$b[i]/(cutpoints$b[i] + cutpoints$d[i]))
}
#Calculate 1-E cutpoints
cutpoints2 <- cutpoints[cutpoints$sensitivity >= (1-E),]
for(i in 1:dim(cutpoints2)[1]){
cutpoints2$sensitivity[i]     <- cutpoints2$a[i]/(cutpoints2$a[i] + cutpoints2$c[i])
cutpoints2$one.specificity[i] <- 1-(cutpoints2$b[i]/(cutpoints2$b[i] + cutpoints2$d[i]))
}
#Calculate the area under the null curve given E
null <- ((min(cutpoints2$one.specificity)+1)/2)*(1-min(cutpoints2$one.specificity))
#Calculate AUC value for each cutpoint
for(i in 1:dim(cutpoints2)[1]){
cutpoints2$AUC[i] <- ifelse(cutpoints2[i,1] == 0, (((1+cutpoints2$sensitivity[i])/2) * (1-cutpoints2$one.specificity[i])),
(((cutpoints2$sensitivity[i] + cutpoints2$sensitivity[i-1])/2) * (cutpoints2$one.specificity[i-1] - cutpoints$one.specificity[i])))
}
>>>>>>> a50045bd9dfc6a3b128bcd585bc85194afa8d4f7
#Calculate modified AUC ratio
AUC.ratio <- sum(cutpoints2$AUC)/null
#Plot modified ROC
plot(cutpoints2$one.specificity,cutpoints2$sensitivity,
main = paste("Modified ROC Curve of ", n ," Best Models", sep = ""),
type = "l", col = "blue", lwd = 2, tck = -0.02,
xlab = "1-Specificity",
ylab = "Sensitivity",
ylim = c(0,1.0),
xlim = c(0,1.0))
lines(seq(max(cutpoints2$one.specificity), 1, length.out = 2),
c(max(cutpoints2$sensitivity), max(cutpoints2$sensitivity)), col = "blue", lwd = 2)
lines(seq(0, 1, 0.1), seq(0, 1, 0.1),lwd = 1)
segments(0,min(cutpoints2$sensitivity), min(cutpoints2$one.specificity, min(cutpoints2$sensitivity)), lty = 2)
segments(min(cutpoints2$one.specificity),0, min(cutpoints2$one.specificity), min(cutpoints2$sensitivity), lty = 2)
legend(x=0.5, y = 0.5, legend=(c("Models", "Reference", "1-E")),
bg = "", bty = "n", col = c("blue", "black", "black"), lty = c(1,1,2), lwd = c(2,2,2))
max(cutpoints$sensitivity)
if((1-E)>max(cutpoints$sensitivity))
)
(1-E)
max(cutpoints$sensitivity)
((1-E)>max(cutpoints$sensitivity))
aucRatio <- function(n, x, points, E){
#Extract values from summated grid at test point locations
grid = x
taxa.models <- raster::extract(grid, points)
if(any(is.na(taxa.models))){stop("One or more testing points do not overlap raster.")}
#Create cutpoints dataframe
cutpoints <- data.frame(seq(0, n, 1))
names(cutpoints) <- "cutpoint"
#Summarize each cutpoint
for(i in 1:dim(cutpoints)[1]){
cutpoints$taxa.present[i]   <- sum(taxa.models == i-1)
cutpoints$cutpoint.area[i]  <- freq(grid, value = i-1)
cutpoints$no.taxa.pixels[i] <- freq(grid, value = i-1) - sum(taxa.models == i-1)
cutpoints$cum.area[i] <- ifelse(cutpoints$cutpoint[i] == 0,0,
ifelse(cutpoints$cutpoint[i] == 1,
(cutpoints$no.taxa.pixels[1] + cutpoints$no.taxa.pixels[i]),
(cutpoints$no.taxa.pixels[i] + cutpoints$cum.area[i-1])))
}
#Calculate confusion matrix
for(i in 1:dim(cutpoints)[1]){
cutpoints$a[i] <- ifelse(cutpoints[i,1] == 0, (length(taxa.models) - cutpoints$taxa.present[i]),(cutpoints$a[i-1] - cutpoints$taxa.present[i]))
cutpoints$b[i] <- ifelse(cutpoints[i,1] == 0, cutpoints$no.taxa.pixels[i], (cutpoints$b[i-1] + cutpoints$no.taxa.pixels[i]))
cutpoints$c[i] <- ifelse(cutpoints[i,1] == 0, cutpoints$taxa.present[i], (cutpoints$c[i-1] + cutpoints$taxa.present[i]))
cutpoints$d[i] <- ifelse(cutpoints[i,1] == 0, (sum(cutpoints$no.taxa.pixels) - cutpoints$no.taxa.pixels[i]), (cutpoints$d[i-1] - cutpoints$no.taxa.pixels[i]))
}
#Calculate sensitivity and 1-specificity
for(i in 1:dim(cutpoints)[1]){
cutpoints$sensitivity[i]     <- cutpoints$a[i]/(cutpoints$a[i] + cutpoints$c[i])
cutpoints$one.specificity[i] <- 1-(cutpoints$b[i]/(cutpoints$b[i] + cutpoints$d[i]))
}
#Calculate 1-E cutpoints
if((1-E)>max(cutpoints$sensitivity)){stop("Maximum sensitivity less than error threshold (E). Select a higher value for E.")}
cutpoints2 <- cutpoints[cutpoints$sensitivity >= (1-E),]
for(i in 1:dim(cutpoints2)[1]){
cutpoints2$sensitivity[i]     <- cutpoints2$a[i]/(cutpoints2$a[i] + cutpoints2$c[i])
cutpoints2$one.specificity[i] <- 1-(cutpoints2$b[i]/(cutpoints2$b[i] + cutpoints2$d[i]))
}
#Calculate the area under the null curve given E
null <- ((min(cutpoints2$one.specificity)+1)/2)*(1-min(cutpoints2$one.specificity))
#Calculate AUC value for each cutpoint
for(i in 1:dim(cutpoints2)[1]){
cutpoints2$AUC[i] <- ifelse(cutpoints2[i,1] == 0, (((1+cutpoints2$sensitivity[i])/2) * (1-cutpoints2$one.specificity[i])),
(((cutpoints2$sensitivity[i] + cutpoints2$sensitivity[i-1])/2) * (cutpoints2$one.specificity[i-1] - cutpoints$one.specificity[i])))
}
#Calculate modified AUC ratio
AUC.ratio <- sum(cutpoints2$AUC)/null
#Plot modified ROC
plot(cutpoints2$one.specificity,cutpoints2$sensitivity,
main = paste("Modified ROC Curve of ", n ," Best Models", sep = ""),
type = "l", col = "blue", lwd = 2, tck = -0.02,
xlab = "1-Specificity",
ylab = "Sensitivity",
ylim = c(0,1.0),
xlim = c(0,1.0))
lines(seq(max(cutpoints2$one.specificity), 1, length.out = 2),
c(max(cutpoints2$sensitivity), max(cutpoints2$sensitivity)), col = "blue", lwd = 2)
lines(seq(0, 1, 0.1), seq(0, 1, 0.1),lwd = 1)
segments(0,min(cutpoints2$sensitivity), min(cutpoints2$one.specificity, min(cutpoints2$sensitivity)), lty = 2)
segments(min(cutpoints2$one.specificity),0, min(cutpoints2$one.specificity), min(cutpoints2$sensitivity), lty = 2)
legend(x=0.5, y = 0.5, legend=(c("Models", "Reference", "1-E")),
bg = "", bty = "n", col = c("blue", "black", "black"), lty = c(1,1,2), lwd = c(2,2,2))
return(list(Modified.AUC= sum(cutpoints2$AUC), Modified.Reference = null, AUC.Ratio = AUC.ratio))
}
aucRatio(n = 10, x = r.sum, points = test.pts, E = 0.05)
aucRatio(n = 10, x = x, points = points, E = 0.05)
aucRatio(n = 10, x = x, points = points, E = 0.05)
aucRatio(n = 10, x = x, points = points, E = 0.25)
aucGARP(n = 10, x = x, points = points)
aucGARP(n = 10, x = x, points = points)
aucRatio(n = 10, x = x, points = points, E = 0.25)
#Set working directory to package folder
setwd("C:/Users/haasec/OneDrive - Austin Peay State University/SEER/Package/GARPTools")
#Set working directory to package folder
setwd("C:/Users/haasec/OneDrive - Austin Peay State University/SEER/Package/GARPTools")
setwd("~/GitHub/GARPTools")
<<<<<<< HEAD
=======
#Create Namespace document, help files: errors here if there are not packages in the import lines of the R code
document()
library(devtools)
#Create Namespace document, help files: errors here if there are not packages in the import lines of the R code
document()
#Create Namespace document, help files: errors here if there are not packages in the import lines of the R code
document()
#Check that the package can be built: lots of errors and fixing may happen here! A few common errors:
#Dependencies not required: need to add dependencies to Description files
#Packge not found (but listed in dependencies): probably need to call "library(package)" in the help file or example files
check()
#Build package
build()
install_github("cghaase/GARPTools")
env_layers <- load(file.choose())
env)layers
library(raster)
plot(env_layers)
load(file.choose())
env_layers
plot(env_layers)
writeRaster(env_layers[[1]], file = "alt.asc")
writeRaster(env_layers[[2]], file = "bio1.asc")
writeRaster(env_layers[[3]], file = "bio12.asc")
usethis::use_data(env_layers, GARPTools)
library(usethis)
?use_data
?use_data_raw
use_data_raw(env_layers)
use_data_raw()
usethis::use_data()
usethis::use_data(env_layers)
usethis::use_data(env_layers, overwrite = T)
>>>>>>> a50045bd9dfc6a3b128bcd585bc85194afa8d4f7
#Create Namespace document, help files: errors here if there are not packages in the import lines of the R code
document()
library(devtools)
library(roxygen2)
#Create Namespace document, help files: errors here if there are not packages in the import lines of the R code
document()
<<<<<<< HEAD
#Create Namespace document, help files: errors here if there are not packages in the import lines of the R code
document()
=======
>>>>>>> a50045bd9dfc6a3b128bcd585bc85194afa8d4f7
#Check that the package can be built: lots of errors and fixing may happen here! A few common errors:
#Dependencies not required: need to add dependencies to Description files
#Packge not found (but listed in dependencies): probably need to call "library(package)" in the help file or example files
check()
<<<<<<< HEAD
#Build package
build()
install_github("cghaase/GARPTools")
=======
tools::checkRdaFiles()
env_layers
plot(env_layers)
plot(env_layers[[1]])
writeRaster(env_layers[[1]], "alt.asc")
bio
bio_1
env_layers
alt <- raster(file.choose())
alt
bio_1 <- raster(file.choose())
bio_12 <- raster(file.choose())
load(file.choose())
tasks_layers
plot(tasks_layers)
plot(tasks_layers)
writeRaster(tasks_layers, "data/tasks_layers.asc")
tasks_layers
writeRaster(tasks_layers, 'output.tif')
tasks2 <- raster(file.choose())
tasks2
plot(tasks2)
tasks2 <- raster(file.choose(), band =2)
plot(tasks2)
tasks2
writeRaster(env_layers, 'inst/extdata/env_layers.tif')
library(GARPTools)
alt <- raster(system.file("extdata/env_layers", package="raster"), band = 1)
#Create Namespace document, help files: errors here if there are not packages in the import lines of the R code
document()
library(devtools)
install_github("cghaase/GARPTools")
alt <- raster(system.file("extdata/env_layers.TIF", package="raster"), band = 1)
raster(system.file("extdata/env_layers.TIF", package="raster"), band = 1)
alt <- raster(system.file("extdata/env_layers.TIF", package="GARPTools"), band = 1)
plot(alt)
plot(alt)
alt <- raster(system.file("extdata/env_layers.TIF", package="GARPTools"), band = 1)
plot(alt)
plot(alt)
library(raster)
plot(alt)
alt
alt <- raster(system.file("extdata/alt.asc", package="GARPTools"))
plot(alt)
dev.off()
plot(alt)
alt <- raster(system.file("extdata/env_layers.TIF", package="GARPTools"), band = 1)
plot(alt)
bio_1  <- raster(system.file("extdata/bio_1.asc",  package="GARPTools"))
bio_12 <- raster(system.file("extdata/bio_12.asc", package="GARPTools"))
plot(bio_1)
bio_1
plot(bio1, bio_12)
plot(bio_1, bio_12)
par(mcfrow = c(0,3))
par(mfrow = c(0,3))
par(mfrow = c(0,3))
par(mfrow = c(0,3))
library(raster)
par(mfrow = c(0,3))
plot(alt)
plot(bio_1)
plot(bio_12)
par(mfrow = c(1,3))
plot(alt)
plot(bio_1)
plot(bio_12)
library(GARPTools, raster)
writeRaster(raster(system.file("extdata/task_layers.TIF", package="GARPTools"), band = 1),
filename = "C:/GARP/BestSubsets/task1.asc",  overwrite = TRUE)
writeRaster(raster(system.file("extdata/task_layers.TIF", package="GARPTools"), band = 2),
filename = "C:/GARP/BestSubsets/task2.asc",  overwrite = TRUE)
writeRaster(raster(system.file("extdata/task_layers.TIF", package="GARPTools"), band = 3),
filename = "C:/GARP/BestSubsets/task3.asc",  overwrite = TRUE)
writeRaster(raster(system.file("extdata/task_layers.TIF", package="GARPTools"), band = 4),
filename = "C:/GARP/BestSubsets/task4.asc",  overwrite = TRUE)
writeRaster(raster(system.file("extdata/task_layers.TIF", package="GARPTools"), band = 5),
filename = "C:/GARP/BestSubsets/task5.asc",  overwrite = TRUE)
writeRaster(raster(system.file("extdata/task_layers.TIF", package="GARPTools"), band = 6),
filename = "C:/GARP/BestSubsets/task6.asc",  overwrite = TRUE)
writeRaster(raster(system.file("extdata/task_layers.TIF", package="GARPTools"), band = 7),
filename = "C:/GARP/BestSubsets/task7.asc",  overwrite = TRUE)
writeRaster(raster(system.file("extdata/task_layers.TIF", package="GARPTools"), band = 8),
filename = "C:/GARP/BestSubsets/task8.asc",  overwrite = TRUE)
writeRaster(raster(system.file("extdata/task_layers.TIF", package="GARPTools"), band = 9),
filename = "C:/GARP/BestSubsets/task9.asc",  overwrite = TRUE)
writeRaster(raster(system.file("extdata/task_layers.TIF", package="GARPTools"), band = 10),
filename = "C:/GARP/BestSubsets/task10.asc",  overwrite = TRUE)
writeRaster(raster(system.file("extdata/tasks_layer.TIF", package="GARPTools"), band = 1),
filename = "C:/GARP/BestSubsets/task1.asc",  overwrite = TRUE)
writeRaster(raster(system.file("extdata/tasks_layer.TIF", package="GARPTools"), band = 1),
filename = "C:/GARP/BestSubsets/task1.asc",  overwrite = TRUE)
writeRaster(raster(system.file("extdata/tasks_layer.TIF", package="GARPTools"), band = 2),
filename = "C:/GARP/BestSubsets/task2.asc",  overwrite = TRUE)
writeRaster(raster(system.file("extdata/tasks_layer.TIF", package="GARPTools"), band = 3),
filename = "C:/GARP/BestSubsets/task3.asc",  overwrite = TRUE)
writeRaster(raster(system.file("extdata/tasks_layer.TIF", package="GARPTools"), band = 4),
filename = "C:/GARP/BestSubsets/task4.asc",  overwrite = TRUE)
writeRaster(raster(system.file("extdata/tasks_layer.TIF", package="GARPTools"), band = 5),
filename = "C:/GARP/BestSubsets/task5.asc",  overwrite = TRUE)
writeRaster(raster(system.file("extdata/tasks_layer.TIF", package="GARPTools"), band = 6),
filename = "C:/GARP/BestSubsets/task6.asc",  overwrite = TRUE)
writeRaster(raster(system.file("extdata/tasks_layer.TIF", package="GARPTools"), band = 7),
filename = "C:/GARP/BestSubsets/task7.asc",  overwrite = TRUE)
writeRaster(raster(system.file("extdata/tasks_layers.TIF", package="GARPTools"), band = 8),
filename = "C:/GARP/BestSubsets/task8.asc",  overwrite = TRUE)
writeRaster(raster(system.file("extdata/tasks_layer.TIF", package="GARPTools"), band = 9),
filename = "C:/GARP/BestSubsets/task9.asc",  overwrite = TRUE)
writeRaster(raster(system.file("extdata/tasks_layer.TIF", package="GARPTools"), band = 10),
filename = "C:/GARP/BestSubsets/task10.asc",  overwrite = TRUE)
writeRaster(raster(system.file("extdata/tasks_layer.TIF", package="GARPTools"), band = 8),
filename = "C:/GARP/BestSubsets/task8.asc",  overwrite = TRUE)
r.sum <- sumRasters("C:/GARP/BestSubsets/")
plot(alt, main = "Altitude (m)")
plot(alt, main = "Altitude (m)")
dev.off()
plot(alt, main = "Altitude (m)")
#Create Namespace document, help files: errors here if there are not packages in the import lines of the R code
document()
library(devtools)
install_github("cghaase/GARPTools")
vignette("GARPTools")
install_github("cghaase/GARPTools", build_manual = TRUE, build_vignettes = TRUE)
install_github("cghaase/GARPTools", build_manual = TRUE, build_vignettes = TRUE, force = T)
system.file(package = "GARPTools")
paste(system.file(package = "GARPTools"), "extdata/raster/alt.asc"
)
paste(system.file(package = "GARPTools"), "/extdata/raster/alt.asc"
)
paste(system.file(package = "GARPTools"), "/extdata/raster/alt.asc", sep = "")
library(GARPTools)
path = paste(system.file(package = "GARPTools"), "/extdata/raster/", sep = "")
path = paste(system.file(package = "GARPTools"), "/extdata/raster/", sep = "")
path
paste(path,"alt.asc", sep = "")
writeRaster(alt,
filename = paste(path,"alt.asc", sep = ""),
format = "ascii",
overwrite = TRUE)
library(raster)
writeRaster(alt,
filename = paste(path,"alt.asc", sep = ""),
format = "ascii",
overwrite = TRUE)
raster(paste(system.file(package = "GARPTools"), "/extdata/resampled/alt_resample", sep = ""))
paste(system.file(package = "GARPTools"), "/extdata/resampled/alt_resample.asc", sep = "")
path = paste(system.file(package = "GARPTools"), "/extdata/BestSubsets/", sep = "")
paste(path,"task1.asc", sep = "")
system.file("extdata/wtdeer1_test.shp",package="GARPTools")
test.pts <- wtdeer1_test
test.pts
library(GARPTools)
data("nc_boundary")
plot(alt)
alt    <- raster(system.file("extdata/alt.asc",    package="GARPTools"))
library(raster)
alt    <- raster(system.file("extdata/alt.asc",    package="GARPTools"))
plot(alt)
plot(nc_boundary, add = T)
points(wtdeer_locations)
library(devtools)
install_github('cghaase/GARPTools')
library(GARPTools)
install_github('cghaase/GARPTools')
library(GARPTools)
alt_resample <- raster(system.file("extdata/resampled/alt_resample.asc", package="GARPTools"))
wtdeer_centroids <- centroid(x = alt_resample,
points = wtdeer_locations,
xy = wtdeer_df[,c("Latitude","Longitude")],
species = wtdeer_df$Species)
rasterPrep(file.path = "~/rasters",
mask = nc_boundary,
output.path = "~/resampled/")
rasterPrep(file.path = "inst/extdata/rasters",
mask = nc_boundary,
output.path = "inst/extdata/resampled/")
system.file("extdata/rasters", package="GARPTools")
rasterPrep(file.path = system.file("extdata/rasters", package="GARPTools"),
mask = nc_boundary,
output.path = system.file("extdata/resampled/", package="GARPTools"))
splitData(points = wtdeer_centroids,
p = 0.75,
type = "all",
iterations = 10,
output = TRUE,
output.path = system.file("extdata/", package="GARPTools"),
output.name = "wtdeer")
r.sum <- sumRasters(system.file("extdata/BestSubsets/", package="GARPTools"))
data("wtdeer1_test.shp")
data("wtdeer1_test")
plot(wtdeer1_test)
data("wtdeer1_test")
plot(r.sum)
plot(nc_boundary, add = TRUE)
points(wtdeer1_test, pch = 16)
?power
?power.t.test
power.t.test(delta = 0.3, sig.level = 0.05, power = .8)
power.t.test(delta = 0.3, sig.level = 0.05, power = .8, type = "two.sample")
power.t.test(delta = 0.5, sig.level = 0.05, power = .8, type = "two.sample")
power.t.test(delta = 0.5, sig.level = 0.05, power = .8, type = "two.sample")
power.t.test(delta = 0.5, sig.level = 0.05, power = .7, type = "two.sample")
power.t.test(delta = 0.5, sig.level = 0.05, power = .7, type = "two.sample")
power.t.test(delta = 0.8, sig.level = 0.05, power = .8, type = "two.sample")
>>>>>>> a50045bd9dfc6a3b128bcd585bc85194afa8d4f7
