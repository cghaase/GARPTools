bsdirlist<-pathB
BestRules<-c()
bestmodel<-c()
rsetlist<-list.files(path=rsetPridir, pattern = 'grid')
rsetlist
bestmodel
bsdirlist
rsetPridir
rsetdir
rsetlist[l
]
rsetdir <- paste(rsetPridir,"/",rsetlist[l],sep = '')
rsetdir
rsetFile <- list.files(path = rsetdir, pattern = 'rset_\\d+_0')
rsetFile
rsetdir
rsetdir <- paste(rsetPridir,"/",rsetlist[l],"/",rsetlist[l],sep = '')
rsetdir
rsetFile <- list.files(path = rsetdir, pattern = 'rset_\\d+_0')
rsetFile
k
k=1
if (grepl('\\.[a-z]',rsetFile[k])==FALSE){
rset <- regmatches(rsetFile[k], regexpr('\\d+_',rsetFile[k]))
rset <- regmatches(rset, regexpr('\\d+',rset))
rset <- as.numeric(rset)
if (rset==best){
rsetRa <- paste(rsetdir,'/',sep = '')
rsetRa <- paste(rsetRa, rsetFile[k], sep = '')
rsetRa <- raster(rsetRa)
dbf <- zonal(rsetRa,rsetRa,'mean')
dbf<-dbf[order(-dbf$length),]
dbf<-data.frame(dbf)
time=0
total=0
for (m in 1:length(dbf$length)){
total=total+dbf$length[m]
if (total<=0.9*sum(dbf$length)){
if (dbf$zones[m] != 0){
#print (dbf$zones[m])
bestmodel<-append(bestmodel,best)
BestRules<-append(BestRules,as.numeric(paste(dbf$zones[m])))
}
}else {
time=time+1
if (time == 1){
if (dbf$zones[m] != 0){
bestmodel<-append(bestmodel,best)
BestRules<-append(BestRules,as.numeric(paste(dbf$zones[m])))
}
}
}
}
}
}
findModRules <- function(pathA,pathB){
rsetPridir<-pathA
bsdirlist<-pathB
BestRules<-c()
bestmodel<-c()
rsetlist<-list.files(path=rsetPridir, pattern = 'grid')
#find the rset for best subsets, do the zonal stats, and find the rules covered 90%
for (i in 1:length(bsdirlist)){
bslist <- list.files(path = bsdirlist[i],pattern='task', all.files = TRUE, full.names = FALSE)
for (j in 1: length(bslist)){
if (grepl('\\.[a-z]',bslist[j])==FALSE){
best <- regmatches(bslist[j], regexpr("\\d+", bslist[j]))
best <- as.numeric(best)
for (l in 1:length(rsetlist)){
rsetdir <- paste(rsetPridir,"/",rsetlist[l],"/",rsetlist[l],sep = '')
rsetFile <- list.files(path = rsetdir, pattern = 'rset_\\d+_0')
for (k in 1:length(rsetFile)){
if (grepl('\\.[a-z]',rsetFile[k])==FALSE){
rset <- regmatches(rsetFile[k], regexpr('\\d+_',rsetFile[k]))
rset <- regmatches(rset, regexpr('\\d+',rset))
rset <- as.numeric(rset)
if (rset==best){
rsetRa <- paste(rsetdir,'/',sep = '')
rsetRa <- paste(rsetRa, rsetFile[k], sep = '')
rsetRa <- raster(rsetRa)
dbf <- zonal(rsetRa,rsetRa,'mean')
dbf<-dbf[order(-dbf$length),]
dbf<-data.frame(dbf)
time=0
total=0
for (m in 1:length(dbf$length)){
total=total+dbf$length[m]
if (total<=0.9*sum(dbf$length)){
if (dbf$zones[m] != 0){
#print (dbf$zones[m])
bestmodel<-append(bestmodel,best)
BestRules<-append(BestRules,as.numeric(paste(dbf$zones[m])))
}
}else {
time=time+1
if (time == 1){
if (dbf$zones[m] != 0){
bestmodel<-append(bestmodel,best)
BestRules<-append(BestRules,as.numeric(paste(dbf$zones[m])))
}
}
}
}
}
}
}
}
}
}
}
modelRule<-cbind(bestmodel,BestRules)
modelRule<-data.frame(modelRule)
return(modelRule)
}
findModRules <- function(pathA,pathB){
rsetPridir<-pathA
bsdirlist<-pathB
BestRules<-c()
bestmodel<-c()
rsetlist<-list.files(path=rsetPridir, pattern = 'grid')
#find the rset for best subsets, do the zonal stats, and find the rules covered 90%
for (i in 1:length(bsdirlist)){
bslist <- list.files(path = bsdirlist[i],pattern='task', all.files = TRUE, full.names = FALSE)
for (j in 1: length(bslist)){
if (grepl('\\.[a-z]',bslist[j])==FALSE){
best <- regmatches(bslist[j], regexpr("\\d+", bslist[j]))
best <- as.numeric(best)
for (l in 1:length(rsetlist)){
rsetdir <- paste(rsetPridir,"/",rsetlist[l],"/",rsetlist[l],sep = '')
rsetFile <- list.files(path = rsetdir, pattern = 'rset_\\d+_0')
for (k in 1:length(rsetFile)){
if (grepl('\\.[a-z]',rsetFile[k])==FALSE){
rset <- regmatches(rsetFile[k], regexpr('\\d+_',rsetFile[k]))
rset <- regmatches(rset, regexpr('\\d+',rset))
rset <- as.numeric(rset)
if (rset==best){
rsetRa <- paste(rsetdir,'/',sep = '')
rsetRa <- paste(rsetRa, rsetFile[k], sep = '')
rsetRa <- raster(rsetRa)
dbf <- zonal(rsetRa,rsetRa,'mean')
dbf<-dbf[order(-dbf$length),]
dbf<-data.frame(dbf)
time=0
total=0
for (m in 1:length(dbf$length)){
total=total+dbf$length[m]
if (total<=0.9*sum(dbf$length)){
if (dbf$zones[m] != 0){
#print (dbf$zones[m])
bestmodel<-append(bestmodel,best)
BestRules<-append(BestRules,as.numeric(paste(dbf$zones[m])))
}
}else {
time=time+1
if (time == 1){
if (dbf$zones[m] != 0){
bestmodel<-append(bestmodel,best)
BestRules<-append(BestRules,as.numeric(paste(dbf$zones[m])))
}
}
}
}
}
}
}
}
}
}
}
modelRule<-cbind(bestmodel,BestRules)
modelRule<-data.frame(modelRule)
return(modelRule)
}
modelRule <- findModRules(pathA = system.file("extdata/runs/", package="GARPTools"),
pathB = system.file("extdata/BestSubsets/", package="GARPTools"))
grepl('\\.[a-z]',rsetFile[k])
rsetFile[k]
rset <- regmatches(rsetFile[k], regexpr('\\d+_',rsetFile[k]))
rset
rset <- regmatches(rset, regexpr('\\d+',rset))
rset
rset <- as.numeric(rset)
rset
best
cbind(bestmodel,BestRules)
#find the rset for best subsets, do the zonal stats, and find the rules covered 90%
for (i in 1:length(bsdirlist)){
bslist <- list.files(path = bsdirlist[i],pattern='task', all.files = TRUE, full.names = FALSE)
for (j in 1: length(bslist)){
if (grepl('\\.[a-z]',bslist[j])==FALSE){
best <- regmatches(bslist[j], regexpr("\\d+", bslist[j]))
best <- as.numeric(best)
for (l in 1:length(rsetlist)){
rsetdir <- paste(rsetPridir,"/",rsetlist[l],"/",rsetlist[l],sep = '')
rsetFile <- list.files(path = rsetdir, pattern = 'rset_\\d+_0')
for (k in 1:length(rsetFile)){
if (grepl('\\.[a-z]',rsetFile[k])==FALSE){
rset <- regmatches(rsetFile[k], regexpr('\\d+_',rsetFile[k]))
rset <- regmatches(rset, regexpr('\\d+',rset))
rset <- as.numeric(rset)
if (rset==best){
rsetRa <- paste(rsetdir,'/',sep = '')
rsetRa <- paste(rsetRa, rsetFile[k], sep = '')
rsetRa <- raster(rsetRa)
dbf <- zonal(rsetRa,rsetRa,'mean')
dbf<-dbf[order(-dbf$length),]
dbf<-data.frame(dbf)
time=0
total=0
for (m in 1:length(dbf$length)){
total=total+dbf$length[m]
if (total<=0.9*sum(dbf$length)){
if (dbf$zones[m] != 0){
#print (dbf$zones[m])
bestmodel<-append(bestmodel,best)
BestRules<-append(BestRules,as.numeric(paste(dbf$zones[m])))
}
}else {
time=time+1
if (time == 1){
if (dbf$zones[m] != 0){
bestmodel<-append(bestmodel,best)
BestRules<-append(BestRules,as.numeric(paste(dbf$zones[m])))
}
}
}
}
}
}
}
}
}
}
}
rset
best
rsetRa <- paste(rsetdir,'/',sep = '')
rsetRa
rsetRa <- paste(rsetRa, rsetFile[k], sep = '')
rsetRa
dbf <- zonal(rsetRa,rsetRa,'mean')
rsetRa <- raster(rsetRa)
rsetRa
dbf <- zonal(rsetRa,rsetRa,'mean')
dbf
dbf<-dbf[order(-dbf$length),]
dbf
# dbf<-dbf[order(-dbf$length),]
dbf<-data.frame(dbf)
dbf
time=0
total=0
class(dbf)
dbf <- zonal(rsetRa,rsetRa,'mean')
class(dbf)
dbf
zonal
?zonal
dbf$Mean
dbf
dbf$mean
dbf[2]
dbf[[2]]
dbf[2]
dbf[,2]
dbf <- zonal(rsetRa,rsetRa,'mean')
dbf<-dbf[order(-dbf[,2]),]
dbf<-data.frame(dbf)
time=0
dbf<-dbf[order(-dbf[,2]),]
dbf<-data.frame(dbf)
dbf
for (m in 1:length(dbf$mean)){
total=total+dbf$mean[m]
if (total<=0.9*sum(dbf$mean)){
if (dbf$zones[m] != 0){
#print (dbf$zones[m])
bestmodel<-append(bestmodel,best)
BestRules<-append(BestRules,as.numeric(paste(dbf$zone[m])))
}
}else {
time=time+1
if (time == 1){
if (dbf$zone[m] != 0){
bestmodel<-append(bestmodel,best)
BestRules<-append(BestRules,as.numeric(paste(dbf$zone[m])))
}
}
}
}
dbf<-data.frame(dbf)
time=0
total=0
length(dbf$mean)
dbf$mean[m]
total=total+dbf$mean[m]
0.9*sum(dbf$mean)
for (m in 1:length(dbf$mean)){
total=total+dbf$mean[m]
if (total<=0.9*sum(dbf$mean)){
if (dbf$zone[m] != 0){
#print (dbf$zones[m])
bestmodel<-append(bestmodel,best)
BestRules<-append(BestRules,as.numeric(paste(dbf$zone[m])))
}
}else {
time=time+1
if (time == 1){
if (dbf$zone[m] != 0){
bestmodel<-append(bestmodel,best)
BestRules<-append(BestRules,as.numeric(paste(dbf$zone[m])))
}
}
}
}
findModRules <- function(pathA,pathB){
rsetPridir<-pathA
bsdirlist<-pathB
BestRules<-c()
bestmodel<-c()
rsetlist<-list.files(path=rsetPridir, pattern = 'grid')
#find the rset for best subsets, do the zonal stats, and find the rules covered 90%
for (i in 1:length(bsdirlist)){
bslist <- list.files(path = bsdirlist[i],pattern='task', all.files = TRUE, full.names = FALSE)
for (j in 1: length(bslist)){
if (grepl('\\.[a-z]',bslist[j])==FALSE){
best <- regmatches(bslist[j], regexpr("\\d+", bslist[j]))
best <- as.numeric(best)
for (l in 1:length(rsetlist)){
rsetdir <- paste(rsetPridir,"/",rsetlist[l],"/",rsetlist[l],sep = '')
rsetFile <- list.files(path = rsetdir, pattern = 'rset_\\d+_0')
for (k in 1:length(rsetFile)){
if (grepl('\\.[a-z]',rsetFile[k])==FALSE){
rset <- regmatches(rsetFile[k], regexpr('\\d+_',rsetFile[k]))
rset <- regmatches(rset, regexpr('\\d+',rset))
rset <- as.numeric(rset)
if (rset==best){
rsetRa <- paste(rsetdir,'/',sep = '')
rsetRa <- paste(rsetRa, rsetFile[k], sep = '')
rsetRa <- raster(rsetRa)
dbf <- zonal(rsetRa,rsetRa,'mean')
dbf<-dbf[order(-dbf[,2]),]
dbf<-data.frame(dbf)
time=0
total=0
for (m in 1:length(dbf$mean)){
total=total+dbf$mean[m]
if (total<=0.9*sum(dbf$mean)){
if (dbf$zone[m] != 0){
#print (dbf$zones[m])
bestmodel<-append(bestmodel,best)
BestRules<-append(BestRules,as.numeric(paste(dbf$zone[m])))
}
}else {
time=time+1
if (time == 1){
if (dbf$zone[m] != 0){
bestmodel<-append(bestmodel,best)
BestRules<-append(BestRules,as.numeric(paste(dbf$zone[m])))
}
}
}
}
}
}
}
}
}
}
}
modelRule<-cbind(bestmodel,BestRules)
modelRule<-data.frame(modelRule)
return(modelRule)
}
modelRule <- findModRules(pathA = system.file("extdata/runs/", package="GARPTools"),
pathB = system.file("extdata/BestSubsets/", package="GARPTools"))
rangelogit <- extractRules(system.file("extdata/RuleSets.txt", package="GARPTools"))
?extractRules
rangelogit <- extractRules(file = system.file("extdata/RuleSets.txt", package="GARPTools"),
table = modelRule,
pathA = system.file("extdata/resampled/", package="GARPTools"),
pathB = system.file("extdata/runs/", package="GARPTools"),
project = FALSE)
write.csv(rangelogit, system.file("extdata/RangeLogit.csv", package="GARPTools"))
rangelogit
?write.csv
rangelogit
class(rangelogit)
system.file("extdata/RangeLogit.csv", package="GARPTools")
write.csv(rangelogit, file = system.file("extdata/RangeLogit.csv", package="GARPTools"))
write.csv(rangelogit, file = paste(system.file("extdata/RangeLogit.csv", package="GARPTools")))
write.csv(rangelogit)
write.csv(rangelogit, "C:/Users/haasec/Documents/R/win-library/3.6/GARPTools/extdata/test.csv")
system.file(package = "GARPTools")
paste(system.file(package = "GARPTools"), "extdata/RangeLogit.csv", sep = "")
paste(system.file(package = "GARPTools"), "/extdata/RangeLogit.csv", sep = "")
write.csv(rangelogit, paste(system.file(package = "GARPTools"), "/extdata/RangeLogit.csv", sep = "")
)
write.csv(rangelogit, write.csv(rangelogit, paste(system.file(package = "GARPTools"), "/extdata/RangeLogit.csv", sep = "")))
write.csv(rangelogit, paste(system.file(package = "GARPTools"), "/extdata/RangeLogit.csv", sep = "")))
write.csv(rangelogit, paste(system.file(package = "GARPTools"), "/extdata/RangeLogit.csv", sep = ""))
MedMinMax <- getMedMinMax(pathA = system.file("extdata/RangeLogit.csv", package="GARPTools"),
pathB = system.file("extdata/resampled/", package="GARPTools"))
recaledM <- rescale(MedMinMax)
plotRange(rescaledM, colour = "purple", n = 15,
xlabel = "Environmental Varibles",
ylabel = "Median Range")
rescaledM <- rescale(MedMinMax)
plotRange(rescaledM, colour = "purple", n = 15,
xlabel = "Environmental Varibles",
ylabel = "Median Range")
PreNo <- totPresRules(file = system.file("extdata/RuleSets.txt", package="GARPTools"))
?totPresRules
PreNo <- totPresRules(file = system.file("extdata/RuleSets.txt", package="GARPTools"),
table = modelRule,
pathA = system.file("extdata/resampled/", package="GARPTools"),
pathB = system.file("extdata/runs/", package="GARPTools"),
project = FALSE)
prevalence <- prevalence(pathA = system.file("extdata/RuleSets.txt", package="GARPTools"),
pathB = system.file("extdata/runs/", package="GARPTools"),
num = 10)
?prevalence
prevalence <- prevalence(pathA = paste(system.file(package = "GARPTools"), "/extdata/RangeLogit.csv", sep=""),
pathB = system.file("extdata/runs/", package="GARPTools"),
num = 10)
write.csv(prevalence, system.file("extdata/Prevalence.csv", package="GARPTools"))
write.csv(prevalence, paste(system.file(package = "GARPTools"), "/extdata/Prevalence.csv", sep=""))
UnimportIndex <- unimportIdx(prevalence, rescaled)
UnimportIndex <- unimportIdx(prevalence, rescaledM)
rescaledM
prevalence
paste(system.file(package = "GARPTools"), "/extdata/RangeLogit.csv", sep="")
pathA = paste(system.file(package = "GARPTools"), "/extdata/RangeLogit.csv", sep="")
pathB = system.file("extdata/runs/", package="GARPTools")
num = 10
RuleDir<-pathA
envdir<-pathB
TotPresNum<-num
DataAll<-data.frame()
i=1
for (i in seq(1:length(RuleDir))){
DataAll<-rbind(DataAll,assign(paste("Data", i, sep = "."), read.csv(RuleDir[i])))
}
DataAll
envdir<-envdir
envnames<-list.files(envdir,pattern=".asc")
Names<-c()
PresNumEn<-c()
TotPres<-c()
envdir
envnames
envnames<-list.files(envdir,pattern=".asc")
envnames
prevalence <- prevalence(pathA = paste(system.file(package = "GARPTools"), "/extdata/RangeLogit.csv", sep=""),
pathB = system.file("extdata/resampled/", package="GARPTools"),
num = 10)
prevalence
write.csv(prevalence, paste(system.file(package = "GARPTools"), "/extdata/Prevalence.csv", sep=""))
UnimportIndex <- unimportIdx(prevalence, rescaledM)
write.csv(UnimportanceIndex, paste(system.file(package = "GARPTools"), "/extdata/UnimportanceIndex.csv", sep=""))
write.csv(UnimportIndex, paste(system.file(package = "GARPTools"), "/extdata/UnimportanceIndex.csv", sep=""))
UnimportIndex
r.sum <- sumRasters(system.file("extdata/BestSubsets/", package="GARPTools"))
file.path = system.file("extdata/BestSubsets/", package="GARPTools")
#List all ASCII files in folder to sum
list.files <- list.files(path = paste(file.path), pattern = ".asc$",  full.names = TRUE)
list.files
paste(file.path)
r.sum <- sumRasters(system.file("extdata/tasks/", package="GARPTools"))
modelRule <- findModRules(pathA = system.file("extdata/runs/", package="GARPTools"),
pathB = system.file("extdata/BestSubsets/", package="GARPTools"))
modelRule
#Create Namespace document, help files: errors here if there are not packages in the import lines of the R code
document()
library(devtools)
library(roxygen2)
#Set working directory to package folder
setwd("C:/Users/haasec/OneDrive - Austin Peay State University/SEER/Package/GARPTools_copied from GitHub")
#Create Namespace document, help files: errors here if there are not packages in the import lines of the R code
document()
#Create Namespace document, help files: errors here if there are not packages in the import lines of the R code
document()
#Create Namespace document, help files: errors here if there are not packages in the import lines of the R code
document()
#Check that the package can be built: lots of errors and fixing may happen here! A few common errors:
#Dependencies not required: need to add dependencies to Description files
#Packge not found (but listed in dependencies): probably need to call "library(package)" in the help file or example files
check()
modelRule <- findModRules(pathA = system.file("extdata/runs/", package="GARPTools"),
pathB = system.file("extdata/BestSubsets/", package="GARPTools"))
findModRules()
findModRules
pathA = system.file("extdata/runs/", package="GARPTools")
pathB = system.file("extdata/BestSubsets/", package="GARPTools")
rsetPridir<-pathA
bsdirlist<-pathB
BestRules<-c()
bestmodel<-c()
rsetlist<-list.files(path=rsetPridir, pattern = 'grid')
rsetlist
rsetPridir
bsdirlist
pathB
pathB = system.file("extdata/BestSubsets/", package="GARPTools")
bsdirlist<-pathB
bsdirlist
pathB
pathB = system.file("extdata/BestSubsets/", package="GARPTools")
pathA
pathB
#Create Namespace document, help files: errors here if there are not packages in the import lines of the R code
document()
