#Subset other points as testing points
test.pts <- points.sp[!(points.sp$id %in% sample), ]
#Make sure in correct format for GARP
train.pts.format <- data.frame(paste(train.pts$Species,n,sep=""), train.pts$Longitude, train.pts$Latitude)
test.pts.format  <- data.frame(paste(test.pts$Species,n,sep=""), test.pts$Longitude, test.pts$Latitude)
colnames(train.pts.format) <- c("Species", "Longitude", "Latitude")
colnames(test.pts.format)  <- c("Species", "Longitude", "Latitude")
train.pts.format.all <- rbind(train.pts.format.all, train.pts.format)
test.pts.format.all  <- rbind(test.pts.format.all, test.pts.format)
}
#Convert to spatial points dataframe
test.pts.all  <- SpatialPointsDataFrame(as.matrix(data.frame(test.pts.format.all$Longitude,test.pts.format.all$Latitude)), data = test.pts.format.all)
#Output testing files
if(type == "test"){
if(output == TRUE){
#Write csv file
write.csv(test.pts.format.all, paste(output.path,output.name,n,"_test.csv", sep = ""), row.names=FALSE)
#Write shapefile
writeOGR(test.pts.all, output.path,paste(output.name,n,"_test", sep = ""), driver = "ESRI Shapefile")
} else if(output == FALSE){return(test.pts.format.all)}
} else if(type == "all"){
if(output == TRUE){
#Write csv file
write.csv(test.pts.format.all, paste(output.path,output.name,n,"_test.csv", sep = ""), row.names=FALSE)
#Write shapefile
writeOGR(test.pts.all, output.path,paste(output.name,n,"_test", sep = ""), driver = "ESRI Shapefile")
} else if(output == FALSE){return(test.pts.format.all)}
}
#Append training files
df.train <- rbind(df.train, train.pts.format.all)
}
df.train <- data.frame()
df.train <- data.frame()
train.pts.format.all <- data.frame()
test.pts.format.all  <- data.frame()
n=1
n
i
#Subset for species
points$Species <- as.factor(points$Species)
points.sp <- subset(points, points$Species == i)
#Add unique id
points.sp$id <- seq(1, length(points.sp$Species))
#Pull a random sample dataset
sample <- sample(points.sp$id,ceiling(length(points.sp) * p))
#Subset points into training points
train.pts <- points.sp[(points.sp$id %in% sample), ]
#Subset other points as testing points
test.pts <- points.sp[!(points.sp$id %in% sample), ]
#Make sure in correct format for GARP
train.pts.format <- data.frame(paste(train.pts$Species,n,sep=""), train.pts$Longitude, train.pts$Latitude)
test.pts.format  <- data.frame(paste(test.pts$Species,n,sep=""), test.pts$Longitude, test.pts$Latitude)
colnames(train.pts.format) <- c("Species", "Longitude", "Latitude")
colnames(test.pts.format)  <- c("Species", "Longitude", "Latitude")
train.pts.format.all <- rbind(train.pts.format.all, train.pts.format)
test.pts.format.all  <- rbind(test.pts.format.all, test.pts.format)
for(i in species){
#Subset for species
points$Species <- as.factor(points$Species)
points.sp <- subset(points, points$Species == i)
#Add unique id
points.sp$id <- seq(1, length(points.sp$Species))
#Pull a random sample dataset
sample <- sample(points.sp$id,ceiling(length(points.sp) * p))
#Subset points into training points
train.pts <- points.sp[(points.sp$id %in% sample), ]
#Subset other points as testing points
test.pts <- points.sp[!(points.sp$id %in% sample), ]
#Make sure in correct format for GARP
train.pts.format <- data.frame(paste(train.pts$Species,n,sep=""), train.pts$Longitude, train.pts$Latitude)
test.pts.format  <- data.frame(paste(test.pts$Species,n,sep=""), test.pts$Longitude, test.pts$Latitude)
colnames(train.pts.format) <- c("Species", "Longitude", "Latitude")
colnames(test.pts.format)  <- c("Species", "Longitude", "Latitude")
train.pts.format.all <- rbind(train.pts.format.all, train.pts.format)
test.pts.format.all  <- rbind(test.pts.format.all, test.pts.format)
}
test.pts.format.all
train.pts.format.all
#Convert to spatial points dataframe
test.pts.all  <- SpatialPointsDataFrame(as.matrix(data.frame(test.pts.format.all$Longitude,test.pts.format.all$Latitude)), data = test.pts.format.all)
test.pts.all
#Output testing files
if(type == "test"){
if(output == TRUE){
#Write csv file
write.csv(test.pts.format.all, paste(output.path,output.name,n,"_test.csv", sep = ""), row.names=FALSE)
#Write shapefile
writeOGR(test.pts.all, output.path,paste(output.name,n,"_test", sep = ""), driver = "ESRI Shapefile")
} else if(output == FALSE){return(test.pts.format.all)}
} else if(type == "all"){
if(output == TRUE){
#Write csv file
write.csv(test.pts.format.all, paste(output.path,output.name,n,"_test.csv", sep = ""), row.names=FALSE)
#Write shapefile
writeOGR(test.pts.all, output.path,paste(output.name,n,"_test", sep = ""), driver = "ESRI Shapefile")
} else if(output == FALSE){return(test.pts.format.all)}
}
#Write csv file
write.csv(test.pts.format.all, paste(output.path,output.name,n,"_test.csv", sep = ""), row.names=FALSE)
#Write shapefile
writeOGR(test.pts.all, output.path,paste(output.name,n,"_test", sep = ""), driver = "ESRI Shapefile")
class(test.pts.all)
output.path
paste(output.name,n,"_test", sep = "")
#Write shapefile
writeOGR(test.pts.all, output.path,paste(output.name,n,"_test.asc", sep = ""), driver = "ESRI Shapefile")
paste(output.name,n,"_test.asc", sep = "")
output.path
#Write shapefile
writeOGR(test.pts.all, output.path,paste(output.name,n,"_test.shp", sep = ""), driver = "ESRI Shapefile")
shapefile(test.pts.all, filename = paste(output.path, output.name,n,"test.shp", sep=""))
splitData <- function(points, p, type = c("train", "test", "all"), iterations = 1, output = TRUE, output.path, output.name){
if("Latitude" %in% names(points) == FALSE) {stop("Coordinates must be labeled 'Latitude' and 'Longitude'.")}
if("Longitude" %in% names(points) == FALSE) {stop("Coordinates must be labeled 'Latitude' and 'Longitude'.")}
if("Species" %in% names(points) == FALSE) {stop("Must contain vector of species names labeled 'Species'.")}
species <- levels(points$Species)
df.train <- data.frame()
for(n in 1:paste(iterations)){
train.pts.format.all <- data.frame()
test.pts.format.all  <- data.frame()
for(i in species){
#Subset for species
points$Species <- as.factor(points$Species)
points.sp <- subset(points, points$Species == i)
#Add unique id
points.sp$id <- seq(1, length(points.sp$Species))
#Pull a random sample dataset
sample <- sample(points.sp$id,ceiling(length(points.sp) * p))
#Subset points into training points
train.pts <- points.sp[(points.sp$id %in% sample), ]
#Subset other points as testing points
test.pts <- points.sp[!(points.sp$id %in% sample), ]
#Make sure in correct format for GARP
train.pts.format <- data.frame(paste(train.pts$Species,n,sep=""), train.pts$Longitude, train.pts$Latitude)
test.pts.format  <- data.frame(paste(test.pts$Species,n,sep=""), test.pts$Longitude, test.pts$Latitude)
colnames(train.pts.format) <- c("Species", "Longitude", "Latitude")
colnames(test.pts.format)  <- c("Species", "Longitude", "Latitude")
train.pts.format.all <- rbind(train.pts.format.all, train.pts.format)
test.pts.format.all  <- rbind(test.pts.format.all, test.pts.format)
}
#Convert to spatial points dataframe
test.pts.all  <- SpatialPointsDataFrame(as.matrix(data.frame(test.pts.format.all$Longitude,test.pts.format.all$Latitude)), data = test.pts.format.all)
#Output testing files
if(type == "test"){
if(output == TRUE){
#Write csv file
write.csv(test.pts.format.all, paste(output.path,output.name,n,"_test.csv", sep = ""), row.names=FALSE)
#Write shapefile
shapefile(test.pts.all, filename = paste(output.path, output.name,n,"_test.shp", sep=""))
} else if(output == FALSE){return(test.pts.format.all)}
} else if(type == "all"){
if(output == TRUE){
#Write csv file
write.csv(test.pts.format.all, paste(output.path,output.name,n,"_test.csv", sep = ""), row.names=FALSE)
#Write shapefile
shapefile(test.pts.all, filename = paste(output.path, output.name,n,"_test.shp", sep=""))
} else if(output == FALSE){return(test.pts.format.all)}
}
#Append training files
df.train <- rbind(df.train, train.pts.format.all)
}
#Convert to spatial points datafame
df.train.sp <- SpatialPointsDataFrame(as.matrix(data.frame(df.train$Longitude,df.train$Latitude)), data = df.train)
#Output files based on type call
if(type == "train"){
if(output == TRUE){
#Write csv file
write.csv(df.train.sp, paste(output.path,output.name,"_train.csv", sep = ""), row.names=FALSE)
#Write shapefile
shapefile(df.train.sp, filename = paste(output.path, output.name,n,"_train.shp", sep=""))
} else if(output == FALSE){return(df.train.sp)}
} else if(type == "all"){
if(output == TRUE){
#Write csv file
write.csv(df.train.sp, paste(output.path,output.name,"_train.csv", sep = ""), row.names=FALSE)
#Write shapefile
shapefile(df.train.sp, filename = paste(output.path, output.name,n,"_train.shp", sep=""))
} else if(output == FALSE){return(df.train.sp)}
}
}
splitData(points = wtdeer_centroids, p = 0.75, type = "all", iterations = 10,
output = TRUE, output.path = "C:/GARP/", output.name = "wtdeer")
?shapefile
splitData(points = wtdeer_centroids, p = 0.75, type = "all", iterations = 10,
output = TRUE, output.path = "C:/GARP/", output.name = "wtdeer")
splitData <- function(points, p, type = c("train", "test", "all"), iterations = 1, output = TRUE, output.path, output.name){
if("Latitude" %in% names(points) == FALSE) {stop("Coordinates must be labeled 'Latitude' and 'Longitude'.")}
if("Longitude" %in% names(points) == FALSE) {stop("Coordinates must be labeled 'Latitude' and 'Longitude'.")}
if("Species" %in% names(points) == FALSE) {stop("Must contain vector of species names labeled 'Species'.")}
species <- levels(points$Species)
df.train <- data.frame()
for(n in 1:paste(iterations)){
train.pts.format.all <- data.frame()
test.pts.format.all  <- data.frame()
for(i in species){
#Subset for species
points$Species <- as.factor(points$Species)
points.sp <- subset(points, points$Species == i)
#Add unique id
points.sp$id <- seq(1, length(points.sp$Species))
#Pull a random sample dataset
sample <- sample(points.sp$id,ceiling(length(points.sp) * p))
#Subset points into training points
train.pts <- points.sp[(points.sp$id %in% sample), ]
#Subset other points as testing points
test.pts <- points.sp[!(points.sp$id %in% sample), ]
#Make sure in correct format for GARP
train.pts.format <- data.frame(paste(train.pts$Species,n,sep=""), train.pts$Longitude, train.pts$Latitude)
test.pts.format  <- data.frame(paste(test.pts$Species,n,sep=""), test.pts$Longitude, test.pts$Latitude)
colnames(train.pts.format) <- c("Species", "Longitude", "Latitude")
colnames(test.pts.format)  <- c("Species", "Longitude", "Latitude")
train.pts.format.all <- rbind(train.pts.format.all, train.pts.format)
test.pts.format.all  <- rbind(test.pts.format.all, test.pts.format)
}
#Convert to spatial points dataframe
test.pts.all  <- SpatialPointsDataFrame(as.matrix(data.frame(test.pts.format.all$Longitude,test.pts.format.all$Latitude)), data = test.pts.format.all)
#Output testing files
if(type == "test"){
if(output == TRUE){
#Write csv file
write.csv(test.pts.format.all, paste(output.path,output.name,n,"_test.csv", sep = ""), row.names=FALSE)
#Write shapefile
shapefile(test.pts.all, filename = paste(output.path, output.name,n,"_test.shp", sep=""), overwrite = TRUE)
} else if(output == FALSE){return(test.pts.format.all)}
} else if(type == "all"){
if(output == TRUE){
#Write csv file
write.csv(test.pts.format.all, paste(output.path,output.name,n,"_test.csv", sep = ""), row.names=FALSE)
#Write shapefile
shapefile(test.pts.all, filename = paste(output.path, output.name,n,"_test.shp", sep=""), overwrite = TRUE)
} else if(output == FALSE){return(test.pts.format.all)}
}
#Append training files
df.train <- rbind(df.train, train.pts.format.all)
}
#Convert to spatial points datafame
df.train.sp <- SpatialPointsDataFrame(as.matrix(data.frame(df.train$Longitude,df.train$Latitude)), data = df.train)
#Output files based on type call
if(type == "train"){
if(output == TRUE){
#Write csv file
write.csv(df.train.sp, paste(output.path,output.name,"_train.csv", sep = ""), row.names=FALSE)
#Write shapefile
shapefile(df.train.sp, filename = paste(output.path, output.name,n,"_train.shp", sep=""), overwrite = TRUE)
} else if(output == FALSE){return(df.train.sp)}
} else if(type == "all"){
if(output == TRUE){
#Write csv file
write.csv(df.train.sp, paste(output.path,output.name,"_train.csv", sep = ""), row.names=FALSE)
#Write shapefile
shapefile(df.train.sp, filename = paste(output.path, output.name,n,"_train.shp", sep=""), overwrite = TRUE)
} else if(output == FALSE){return(df.train.sp)}
}
}
splitData(points = wtdeer_centroids, p = 0.75, type = "all", iterations = 10,
output = TRUE, output.path = "C:/GARP/", output.name = "wtdeer")
?splitData
data(tasks)
data("tasks_layers")
tasks_layers <- tasks
save(tasks_layers)
save(tasks_layers, file = "tasks_layers.RData")
writeRaster(tasks[[1]], "C:/GARP/BestSubsets/task1.asc")
writeRaster(tasks[[2]], "C:/GARP/BestSubsets/task2.asc")
writeRaster(tasks[[3]], "C:/GARP/BestSubsets/task3.asc")
writeRaster(tasks[[4]], "C:/GARP/BestSubsets/task4.asc")
writeRaster(tasks[[5]], "C:/GARP/BestSubsets/task5.asc")
writeRaster(tasks[[6]], "C:/GARP/BestSubsets/task6.asc")
writeRaster(tasks[[7]], "C:/GARP/BestSubsets/task7.asc")
writeRaster(tasks[[8]], "C:/GARP/BestSubsets/task8.asc")
writeRaster(tasks[[9]], "C:/GARP/BestSubsets/task9.asc")
writeRaster(tasks[[10]],"C:/GARP/BestSubsets/task10.asc")
writeRaster(tasks[[1]], "C:/GARP/BestSubsets/task1.asc")
writeRaster(tasks[[2]], "C:/GARP/BestSubsets/task2.asc")
writeRaster(tasks[[3]], "C:/GARP/BestSubsets/task3.asc")
writeRaster(tasks[[4]], "C:/GARP/BestSubsets/task4.asc")
writeRaster(tasks[[5]], "C:/GARP/BestSubsets/task5.asc")
writeRaster(tasks[[6]], "C:/GARP/BestSubsets/task6.asc")
writeRaster(tasks[[7]], "C:/GARP/BestSubsets/task7.asc")
writeRaster(tasks[[8]], "C:/GARP/BestSubsets/task8.asc")
writeRaster(tasks[[9]], "C:/GARP/BestSubsets/task9.asc")
writeRaster(tasks[[10]],"C:/GARP/BestSubsets/task10.asc")
r.sum <- sumRasters("C:/GARP/BestSubsets/")
plot(r.sum)
summary(r.sum)
freq(r.sum)
par(mar=c(2,2,2,1))
test.pts <- readShapePoints("C:/GARP/wtdeer1_test.shp")
plot(r.sum)
plot(nc_boundary, add = TRUE)
points(test.pts, pch = 16)
test.pts <- shapefile("C:/GARP/wtdeer1_test.shp")
test.pts <- shapefile("C:/GARP/wtdeer1_test.shp")
plot(r.sum)
plot(nc_boundary, add = TRUE)
points(test.pts, pch = 16)
par(mar=c(2,2,2,1))
aucGARP(n = 10, x = r.sum, points = test.pts)
commissionGARP(n = 10, x = r.sum, points = test.pts, file.path = "C:/GARP/BestSubsets/")
omissionGARP(n = 10, x = r.sum, points = test.pts)
data("wtdeer_df")
plot(env_layers, nc = 3)
plot(env_layers[[1]])
?writeRaster
class(env_layers[[1]])
writeRaster(env_layers[[1]], filename = "C:/GARP/rasters/alt.asc", format = "ascii", overwrite = TRUE)
rasterPrep(file.path = "C:/GARP/rasters",
mask = nc_boundary,
output.path = "C:/GARP/resampled/")
rasterPrep
#Create Namespace document, help files: errors here if there are not packages in the import lines of the R code
document()
#Check that the package can be built: lots of errors and fixing may happen here! A few common errors:
#Dependencies not required: need to add dependencies to Description files
#Packge not found (but listed in dependencies): probably need to call "library(package)" in the help file or example files
#Issues with rJava: the R version and the Java version have to be compatable
check()
class(carolinas_boundary)
#Create Namespace document, help files: errors here if there are not packages in the import lines of the R code
document()
#Check that the package can be built: lots of errors and fixing may happen here! A few common errors:
#Dependencies not required: need to add dependencies to Description files
#Packge not found (but listed in dependencies): probably need to call "library(package)" in the help file or example files
#Issues with rJava: the R version and the Java version have to be compatable
check()
document()
#Check that the package can be built: lots of errors and fixing may happen here! A few common errors:
#Dependencies not required: need to add dependencies to Description files
#Packge not found (but listed in dependencies): probably need to call "library(package)" in the help file or example files
#Issues with rJava: the R version and the Java version have to be compatable
check()
#Build package
build()
install.packages("C:/Users/haasec/OneDrive - Austin Peay State University/SEER/Package/GARPTools_1.1.0.tar.gz", repos = NULL, type = "source")
rasterPrep(file.path = "C:/GARP/rasters",
mask = nc_boundary,
output.path = "C:/GARP/resampled/")
alt_resample <- raster("C:/GARP/resampled/alt_resample.asc")
wtdeer_centroids <- centroid(x = alt_resample,
points = wtdeer_locations,
xy = wtdeer_df[,c("Latitude","Longitude")],
species = wtdeer_df$Species)
par(mar=c(2,2,2,1))
plot(alt_resample)
points(wtdeer_locations, pch = 16)
points(wtdeer_centroids, col = "purple")
splitData(points = wtdeer_centroids, p = 0.75, type = "all", iterations = 10,
output = TRUE, output.path = "C:/GARP/", output.name = "wtdeer")
taskswriteRaster(tasks_layers[[1]], "C:/GARP/BestSubsets/task1.asc",  overwrite = TRUE)
writeRaster(tasks_layers[[2]], "C:/GARP/BestSubsets/task2.asc",  overwrite = TRUE)
writeRaster(tasks_layers[[3]], "C:/GARP/BestSubsets/task3.asc",  overwrite = TRUE)
writeRaster(tasks_layers[[4]], "C:/GARP/BestSubsets/task4.asc",  overwrite = TRUE)
writeRaster(tasks_layers[[5]], "C:/GARP/BestSubsets/task5.asc",  overwrite = TRUE)
writeRaster(tasks_layers[[6]], "C:/GARP/BestSubsets/task6.asc",  overwrite = TRUE)
writeRaster(tasks_layers[[7]], "C:/GARP/BestSubsets/task7.asc",  overwrite = TRUE)
writeRaster(tasks_layers[[8]], "C:/GARP/BestSubsets/task8.asc",  overwrite = TRUE)
writeRaster(tasks_layers[[9]], "C:/GARP/BestSubsets/task9.asc",  overwrite = TRUE)
writeRaster(tasks_layers[[10]],"C:/GARP/BestSubsets/task10.asc", overwrite = TRUE)
aucGARP(n = 10, x = r.sum, points = test.pts)
library(rmarkdown)
library(knitr)
#Build vignette
build_vignettes()
library(devtools)
library(roxygen2)
#Build vignette
build_vignettes()
library(pandoc)
usethis::use_vignette("my-vignette")
usethis::use_vignette("GARPTools")
#Create Namespace document, help files: errors here if there are not packages in the import lines of the R code
document()
#Check that the package can be built: lots of errors and fixing may happen here! A few common errors:
#Dependencies not required: need to add dependencies to Description files
#Packge not found (but listed in dependencies): probably need to call "library(package)" in the help file or example files
#Issues with rJava: the R version and the Java version have to be compatable
check()
#Create Namespace document, help files: errors here if there are not packages in the import lines of the R code
document()
#Create Namespace document, help files: errors here if there are not packages in the import lines of the R code
document()
#Check that the package can be built: lots of errors and fixing may happen here! A few common errors:
#Dependencies not required: need to add dependencies to Description files
#Packge not found (but listed in dependencies): probably need to call "library(package)" in the help file or example files
#Issues with rJava: the R version and the Java version have to be compatable
check()
library(rgdal)
detach("package:rgdal", unload = TRUE)
plot(env_layers)
#Create Namespace document, help files: errors here if there are not packages in the import lines of the R code
document()
#Check that the package can be built: lots of errors and fixing may happen here! A few common errors:
#Dependencies not required: need to add dependencies to Description files
#Packge not found (but listed in dependencies): probably need to call "library(package)" in the help file or example files
#Issues with rJava: the R version and the Java version have to be compatable
check()
#Create Namespace document, help files: errors here if there are not packages in the import lines of the R code
document()
#Check that the package can be built: lots of errors and fixing may happen here! A few common errors:
#Dependencies not required: need to add dependencies to Description files
#Packge not found (but listed in dependencies): probably need to call "library(package)" in the help file or example files
#Issues with rJava: the R version and the Java version have to be compatable
check()
#Build package
build()
install.packages("C:/Users/haasec/OneDrive - Austin Peay State University/SEER/Package/GARPTools_1.1.0.tar.gz", repos = NULL, type = "source")
#Install package from file and read into library
#Note: help files will not be created until a new session of R is started after installation
library(GARPTools)
#Install package from file and read into library
#Note: help files will not be created until a new session of R is started after installation
library(GARPTools)
carolinas_boundary
vignette("GARPTools")
#Create Namespace document, help files: errors here if there are not packages in the import lines of the R code
document()
library(devtools)
#Create Namespace document, help files: errors here if there are not packages in the import lines of the R code
document()
#Check that the package can be built: lots of errors and fixing may happen here! A few common errors:
#Dependencies not required: need to add dependencies to Description files
#Packge not found (but listed in dependencies): probably need to call "library(package)" in the help file or example files
#Issues with rJava: the R version and the Java version have to be compatable
check()
#Create Namespace document, help files: errors here if there are not packages in the import lines of the R code
document()
#Build package
build()
#Build vignette
usethis::use_vignette("GARPTools")
#Build vignette
usethis::use_vignette("GARPTools")
#Create Namespace document, help files: errors here if there are not packages in the import lines of the R code
document()
#Check that the package can be built: lots of errors and fixing may happen here! A few common errors:
#Dependencies not required: need to add dependencies to Description files
#Packge not found (but listed in dependencies): probably need to call "library(package)" in the help file or example files
#Issues with rJava: the R version and the Java version have to be compatable
check()
#Build package
build()
#Build package
build()
install.packages("C:/Users/haasec/OneDrive - Austin Peay State University/SEER/Package/GARPTools_1.1.0.tar.gz", repos = NULL, type = "source")
#Install package from file and read into library
#Note: help files will not be created until a new session of R is started after installation
library(GARPTools)
#Install package from file and read into library
#Note: help files will not be created until a new session of R is started after installation
library(GARPTools)
vignette("GARPTools")
vignette("GARPTools")
vignette("GARPTools")
#Create Namespace document, help files: errors here if there are not packages in the import lines of the R code
document()
library(devtools)
#Create Namespace document, help files: errors here if there are not packages in the import lines of the R code
document()
#Check that the package can be built: lots of errors and fixing may happen here! A few common errors:
#Dependencies not required: need to add dependencies to Description files
#Packge not found (but listed in dependencies): probably need to call "library(package)" in the help file or example files
#Issues with rJava: the R version and the Java version have to be compatable
check()
#Build package
build()
install.packages("C:/Users/haasec/OneDrive - Austin Peay State University/SEER/Package/GARPTools_1.1.0.tar.gz", repos = NULL, type = "source")
#Install package from file and read into library
#Note: help files will not be created until a new session of R is started after installation
library(GARPTools)
#Install package from file and read into library
#Note: help files will not be created until a new session of R is started after installation
library(GARPTools)
# #Build vignette
# usethis::use_vignette("GARPTools")
vvignette("GARPTools")
# #Build vignette
# usethis::use_vignette("GARPTools")
vignette("GARPTools")
#Test code
wtdeer_df
set.seed(0)
r <- raster(ncols=100, nrows=100)
library(raster)
r <- raster(ncols=100, nrows=100)
r[] <- rbinom(5, 10, 0.3)
hs <- data.frame("Latitude" = c(-89, 72, 63, 42, 54), "Longitude" = c(-12, 13, 24, 26, 87), "Species" = rep("Homo sapiens", 5))
aucGARP(n = 10, x = r, points = SpatialPointsDataFrame(hs[,1:2], data = hs))
library(devtools)
install_github("cghaase/GARPTools")
vignette(GARPTools)
library(GARPTools)
vignette(GARPTools)
vignette("GARPTools")
library(GARPTools)
vignette("GARPTools")
splitData()
library(GARPTools)
vignette("GARPTools")
devtools::install_github("cghaase/GARPTools", build_vignettes = TRUE)
library(GARPTools)
vignette("GARPTools")
wtdeer_df
?aucGARP
vignette("GARPTools")
library(devtools)
install_github("cghaase/GARPTools", build_vignettes = TRUE)
library(GARPTools)
library(GARPTools)
vignette("GARPTools")
library(devtools)
?install_github
install_github("cghaase/GARPTools", build_vignettes = TRUE)
